/************************************************/
/*	Author		:		Mohamed G. ELeish		*/
/*	Date		:		4 September 2021		*/
/*	Version		:		V01						*/
/************************************************/

/************************************************/
/************************************************/
/*****					LOG					*****/
/*	4/9/2021:	File Created					*/
/************************************************/
/************************************************/
#include "STD_TYPES.h"
#include "BIT_MATH.h"

#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"

void MRCC_voidInitClock(void){
	/**** Set CPU Clock Source ****/
	#if RCC_SYSETEM_CLOCK == RCC_CLOCK_HSE
		//wait for the HSE Clock to be stable
		while(!CHK_BIT((RCC_REG->CR),17));
		#if RCC_HSE_SOURCE == RCC_HSE_CRYSTAL
			//Enable CSS, HSEON, Disable HSEBYP
			RCC_REG->CR = 0x00090000;
		#else
			//Enable CSS, HSEON, HSEBYP
			RCC_REG->CR = 0x000D0000;
		#endif
		//Switch to HSE
		RCC_REG->CFGR = 1;
	#elif RCC_SYSETEM_CLOCK == RCC_CLOCK_PLL
		
		#if RCC_PLL_CLOCK_SOURCE == RCC_HSI_DIV_2
			//wait for the HSI Clock to be stable
			while(!CHK_BIT((RCC_REG->CR),1));
			//Enable HSI
			RCC_REG->CR = 0x00000001;
			//Switch to HSI
			RCC_REG->CFGR &= ~3;
			//Disable PLL
			CLR_BIT(RCC_REG->CR,24);
			//Set PLL source
			SET_BIT(RCC_REG->CFGR,16);
		#else
			//wait for the HSE Clock to be stable
			while(!CHK_BIT((RCC_REG->CR),17));
			#if RCC_HSE_SOURCE == RCC_HSE_CRYSTAL
			//Enable CSS, HSEON, Disable HSEBYP
			RCC_REG->CR = 0x00090000;
			#else
			//Enable CSS, HSEON, HSEBYP
			RCC_REG->CR = 0x000D0000;
			#endif
		//Switch to HSE
		RCC_REG->CFGR &= ~3;
		SET_BIT(RCC_REG->CR,0);
		//Disable PLL
		CLR_BIT(RCC_REG->CR,24);
		//Set PLL source
		CLR_BIT(RCC_REG->CFGR,16);
		#if RCC_PLL_CLOCK_SOURCE == RCC_HSE_DIV_2
		SET_BIT((RCC_REG->CFGR),17);
		#endif
		//Set PLL Multiplier
		RCC_REG->CFGR &= ~(0xF << 18);
		RCC_REG->CFGR |= (RCC_PLL_MULIPLIER<<18);
		//Enable PLL
		SET_BIT(RCC_REG->CR,24);
		//Wait for PLL Clock to be Stable
		while(!CHK_BIT((RCC_REG->CR),25));
		//Switch to PLL
		RCC_REG->CFGR &= ~3;
		RCC_REG->CFGR |= 2;
		#endif
	#elif RCC_SYSETEM_CLOCK == RCC_CLOCK_HSI
		//wait for the HSI Clock to be stable
		while(!CHK_BIT((RCC_REG->CR),1));
		//Enable HSI
		RCC_REG->CR = 0x00000001;
		//Switch to HSI
		RCC_REG->CFGR = 0;
	#endif
	

	/***	Set RTC Clock Source	***/

	/*****	Set Buses and Peripherals Prescalars' ****/
	//Clear All Prescalar Bits
	RCC_REG->CFGR &= ~((1<<2)|(3<<14)|(0x3FF << 4));

	//Set All Prescalar at once
	RCC_REG->CFGR |= (RCC_USB_PRESCALAR << 22) |(RCC_AHB_PRESCALAR << 4)
					| (RCC_APB1_PRESCALAR << 8) | (RCC_APB2_PRESCALAR << 11)
					| (RCC_ADC_PRESCALAR << 14);

}

void MRCC_voidEnablePeripheral(PeripheralID_t Copy_Peripheral){

	if(Copy_Peripheral >= RCC_DMA1 && Copy_Peripheral <= RCC_SDIO){
		SET_BIT(RCC_REG->AHBENR,Copy_Peripheral - RCC_DMA1);
	}
	else if (Copy_Peripheral >= RCC_AFIO){
		SET_BIT(RCC_REG->APB2ENR,Copy_Peripheral - RCC_AFIO);
	}
	else if(Copy_Peripheral >= RCC_TIM2){
		SET_BIT(RCC_REG->APB1ENR,Copy_Peripheral);
	}

}

void MRCC_voidDisablePeripheral(PeripheralID_t Copy_Peripheral){

	if(Copy_Peripheral >= RCC_PER_DMA1 && Copy_Peripheral <= RCC_PER_SDIO){
		CLR_BIT(RCC_REG->AHBENR,Copy_Peripheral - RCC_PER_DMA1);
	}
	else if (Copy_Peripheral >= RCC_PER_AFIO){
		CLR_BIT(RCC_REG->APB2ENR,Copy_Peripheral - RCC_PER_AFIO);
	}
	else if(Copy_Peripheral >= RCC_PER_TIM2){
		CLR_BIT(RCC_REG->APB1ENR,Copy_Peripheral);
	}
}

void MRCC_voidResetPeripheral(PeripheralID_t Copy_Peripheral){

	if(Copy_Peripheral >= RCC_PER_DMA1 && Copy_Peripheral <= RCC_PER_SDIO){
		CLR_BIT(RCC_REG->AHBENR,Copy_Peripheral - RCC_PER_DMA1);
		SET_BIT(RCC_REG->AHBENR,Copy_Peripheral - RCC_PER_DMA1);
	}
	else if (Copy_Peripheral >= RCC_PER_AFIO){
		RCC_REG->APB2RSTR |= 1<<(Copy_Peripheral - RCC_PER_AFIO);
	}
	else if(Copy_Peripheral >= RCC_PER_TIM2){
		RCC_REG->APB1RSTR |= 1<<(Copy_Peripheral);
	}

}

void MRCC_voidEnableMCO(RCC_MCO_Source_t Copy_Source){

	RCC_REG->CFGR &= ~(3<<24);
	RCC_REG->CFGR |= Copy_Source<<24;
}

void MRCC_voidDisableMCO(void){
	RCC_REG->CFGR &= ~(3<<24);

}
