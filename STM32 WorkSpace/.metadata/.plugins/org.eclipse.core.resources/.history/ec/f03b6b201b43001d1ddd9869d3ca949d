
LinkingTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001de8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001ef4  08001ef4  00011ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f10  08001f10  00011f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f14  08001f14  00011f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000038  20000000  08001f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f8  20000038  08001f50  00020038  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000130  08001f50  00020130  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  9 .debug_info   000045cf  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001072  00000000  00000000  00024630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000798  00000000  00000000  000256a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  00025e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000224d  00000000  00000000  000264f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000036b3  00000000  00000000  0002873d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002bdf0  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001da4  00000000  00000000  0002be6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002dc10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08001edc 	.word	0x08001edc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08001edc 	.word	0x08001edc

0800014c <LSTRING_s32ToInt>:
#include "BIT_MATH.h"

#include "String_interface.h"


s32 LSTRING_s32ToInt(char* String, char Seperator){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]

	s32 Local_s32Value = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	60fb      	str	r3, [r7, #12]
	s8 Local_s8NegativeFlag = 1;
 800015c:	2301      	movs	r3, #1
 800015e:	72fb      	strb	r3, [r7, #11]

	if (Local_s8NegativeFlag == -1 ){
		String++;
		Local_s8NegativeFlag = -1;
	}
	while(*String != 0 && *String != Seperator){
 8000160:	e00d      	b.n	800017e <LSTRING_s32ToInt+0x32>
		Local_s32Value = Local_s32Value*10 + *String - '0';
 8000162:	68fa      	ldr	r2, [r7, #12]
 8000164:	4613      	mov	r3, r2
 8000166:	009b      	lsls	r3, r3, #2
 8000168:	4413      	add	r3, r2
 800016a:	005b      	lsls	r3, r3, #1
 800016c:	461a      	mov	r2, r3
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	4413      	add	r3, r2
 8000174:	3b30      	subs	r3, #48	; 0x30
 8000176:	60fb      	str	r3, [r7, #12]
		String++;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	3301      	adds	r3, #1
 800017c:	607b      	str	r3, [r7, #4]
	while(*String != 0 && *String != Seperator){
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d004      	beq.n	8000190 <LSTRING_s32ToInt+0x44>
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	78fa      	ldrb	r2, [r7, #3]
 800018c:	429a      	cmp	r2, r3
 800018e:	d1e8      	bne.n	8000162 <LSTRING_s32ToInt+0x16>
	}
	return Local_s32Value*Local_s8NegativeFlag;
 8000190:	7afb      	ldrb	r3, [r7, #11]
 8000192:	68fa      	ldr	r2, [r7, #12]
 8000194:	fb02 f303 	mul.w	r3, r2, r3

}
 8000198:	4618      	mov	r0, r3
 800019a:	3714      	adds	r7, #20
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
	...

080001a4 <SysTick_Handler>:
void MSTK_voidClibrate(void){
	
}


void SysTick_Handler(void){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	if(PSTK_voidUnderFlowCallBack != 0)
 80001a8:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <SysTick_Handler+0x30>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d002      	beq.n	80001b6 <SysTick_Handler+0x12>
		PSTK_voidUnderFlowCallBack();
 80001b0:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <SysTick_Handler+0x30>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4798      	blx	r3
	STK_REG->CTRL;
 80001b6:	4b08      	ldr	r3, [pc, #32]	; (80001d8 <SysTick_Handler+0x34>)
 80001b8:	681b      	ldr	r3, [r3, #0]
	if(PSTK_u8SingleInterruptFlag == 1)
 80001ba:	4b08      	ldr	r3, [pc, #32]	; (80001dc <SysTick_Handler+0x38>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d105      	bne.n	80001ce <SysTick_Handler+0x2a>
		CLR_BIT(STK_REG->CTRL,1);
 80001c2:	4a05      	ldr	r2, [pc, #20]	; (80001d8 <SysTick_Handler+0x34>)
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <SysTick_Handler+0x34>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	f023 0302 	bic.w	r3, r3, #2
 80001cc:	6013      	str	r3, [r2, #0]
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	20000058 	.word	0x20000058
 80001d8:	e000e010 	.word	0xe000e010
 80001dc:	20000054 	.word	0x20000054

080001e0 <TAMPER_IRQHandler>:
void MBKP_voidSetTamperCallBack(void(*CallBack)(void)){
	PBKP_voidCallBack = CallBack;
}


void TAMPER_IRQHandler(void){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	if(PBKP_voidCallBack != 0)
 80001e4:	4b07      	ldr	r3, [pc, #28]	; (8000204 <TAMPER_IRQHandler+0x24>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d002      	beq.n	80001f2 <TAMPER_IRQHandler+0x12>
		PBKP_voidCallBack();
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <TAMPER_IRQHandler+0x24>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4798      	blx	r3
	
	SET_BIT(BKP_REG->CSR,1);
 80001f2:	4a05      	ldr	r2, [pc, #20]	; (8000208 <TAMPER_IRQHandler+0x28>)
 80001f4:	4b04      	ldr	r3, [pc, #16]	; (8000208 <TAMPER_IRQHandler+0x28>)
 80001f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f8:	f043 0302 	orr.w	r3, r3, #2
 80001fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80001fe:	bf00      	nop
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	2000005c 	.word	0x2000005c
 8000208:	40006c00 	.word	0x40006c00

0800020c <MRCC_voidInitClock>:

#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"

void MRCC_voidInitClock(void){
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
			CLR_BIT(RCC_REG->CR,24);
			//Set PLL source
			CLR_BIT(RCC_REG->CFGR,16);
		#else
			//wait for the HSE Clock to be stable
			while(!CHK_BIT((RCC_REG->CR),17));
 8000210:	bf00      	nop
 8000212:	4b2c      	ldr	r3, [pc, #176]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800021a:	2b00      	cmp	r3, #0
 800021c:	d0f9      	beq.n	8000212 <MRCC_voidInitClock+0x6>
			#if RCC_HSE_SOURCE == RCC_HSE_CRYSTAL
			//Enable CSS, HSEON, Disable HSEBYP
			RCC_REG->CR = 0x00090000;
 800021e:	4b29      	ldr	r3, [pc, #164]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 8000220:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000224:	601a      	str	r2, [r3, #0]
			#else
			//Enable CSS, HSEON, HSEBYP
			RCC_REG->CR = 0x000D0000;
			#endif
		//Switch to HSE
		RCC_REG->CFGR &= ~3;
 8000226:	4a27      	ldr	r2, [pc, #156]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	f023 0303 	bic.w	r3, r3, #3
 8000230:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC_REG->CR,0);
 8000232:	4a24      	ldr	r2, [pc, #144]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	f043 0301 	orr.w	r3, r3, #1
 800023c:	6013      	str	r3, [r2, #0]
		//Disable PLL
		CLR_BIT(RCC_REG->CR,24);
 800023e:	4a21      	ldr	r2, [pc, #132]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 8000240:	4b20      	ldr	r3, [pc, #128]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000248:	6013      	str	r3, [r2, #0]

		//Set PLL source
		SET_BIT(RCC_REG->CFGR,16);
 800024a:	4a1e      	ldr	r2, [pc, #120]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 800024c:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000254:	6053      	str	r3, [r2, #4]
		#if RCC_PLL_CLOCK_SOURCE == RCC_HSE_DIV_2
		SET_BIT((RCC_REG->CFGR),17);
		#endif
		//Set PLL Multiplier
		RCC_REG->CFGR &= ~(0xF << 18);
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 8000258:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000260:	6053      	str	r3, [r2, #4]
		RCC_REG->CFGR |= (RCC_PLL_MULIPLIER<<18);
 8000262:	4a18      	ldr	r2, [pc, #96]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800026c:	6053      	str	r3, [r2, #4]
		//Enable PLL
		SET_BIT(RCC_REG->CR,24);
 800026e:	4a15      	ldr	r2, [pc, #84]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000278:	6013      	str	r3, [r2, #0]
		//Wait for PLL Clock to be Stable
		while(!CHK_BIT((RCC_REG->CR),25));
 800027a:	bf00      	nop
 800027c:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000284:	2b00      	cmp	r3, #0
 8000286:	d0f9      	beq.n	800027c <MRCC_voidInitClock+0x70>
		//Switch to PLL
		RCC_REG->CFGR &= ~3;
 8000288:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	f023 0303 	bic.w	r3, r3, #3
 8000292:	6053      	str	r3, [r2, #4]
		RCC_REG->CFGR |= 2;
 8000294:	4a0b      	ldr	r2, [pc, #44]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 8000296:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	f043 0302 	orr.w	r3, r3, #2
 800029e:	6053      	str	r3, [r2, #4]

	/***	Set RTC Clock Source	***/

	/*****	Set Buses and Peripherals Prescalars' ****/
	//Clear All Prescalar Bits
	RCC_REG->CFGR &= ~((1<<2)|(3<<14)|(0x3FF << 4));
 80002a0:	4a08      	ldr	r2, [pc, #32]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 80002a2:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80002aa:	f023 03f4 	bic.w	r3, r3, #244	; 0xf4
 80002ae:	6053      	str	r3, [r2, #4]

	//Set All Prescalar at once
	RCC_REG->CFGR |= (RCC_USB_PRESCALAR << 22) |(RCC_AHB_PRESCALAR << 4)
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 80002b2:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <MRCC_voidInitClock+0xb8>)
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80002ba:	6053      	str	r3, [r2, #4]
					| (RCC_APB1_PRESCALAR << 8) | (RCC_APB2_PRESCALAR << 11)
					| (RCC_ADC_PRESCALAR << 14);

}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	40021000 	.word	0x40021000

080002c8 <MRCC_voidEnablePeripheral>:

void MRCC_voidEnablePeripheral(RCC_PeripheralID_t Copy_Peripheral){
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]

	if(Copy_Peripheral >= RCC_PER_DMA1 && Copy_Peripheral <= RCC_PER_SDIO){
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	2b34      	cmp	r3, #52	; 0x34
 80002d6:	d90d      	bls.n	80002f4 <MRCC_voidEnablePeripheral+0x2c>
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	2b3f      	cmp	r3, #63	; 0x3f
 80002dc:	d80a      	bhi.n	80002f4 <MRCC_voidEnablePeripheral+0x2c>
		SET_BIT(RCC_REG->AHBENR,(Copy_Peripheral - RCC_PER_DMA1));
 80002de:	4913      	ldr	r1, [pc, #76]	; (800032c <MRCC_voidEnablePeripheral+0x64>)
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <MRCC_voidEnablePeripheral+0x64>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	79fa      	ldrb	r2, [r7, #7]
 80002e6:	3a35      	subs	r2, #53	; 0x35
 80002e8:	2001      	movs	r0, #1
 80002ea:	fa00 f202 	lsl.w	r2, r0, r2
 80002ee:	4313      	orrs	r3, r2
 80002f0:	614b      	str	r3, [r1, #20]
	}
	else if(Copy_Peripheral >= RCC_PER_TIM2){
		SET_BIT(RCC_REG->APB1ENR,Copy_Peripheral);
	}

}
 80002f2:	e016      	b.n	8000322 <MRCC_voidEnablePeripheral+0x5a>
	else if (Copy_Peripheral >= RCC_PER_AFIO){
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	2b1d      	cmp	r3, #29
 80002f8:	d90a      	bls.n	8000310 <MRCC_voidEnablePeripheral+0x48>
		SET_BIT(RCC_REG->APB2ENR,(Copy_Peripheral - RCC_PER_AFIO));
 80002fa:	490c      	ldr	r1, [pc, #48]	; (800032c <MRCC_voidEnablePeripheral+0x64>)
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <MRCC_voidEnablePeripheral+0x64>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	79fa      	ldrb	r2, [r7, #7]
 8000302:	3a1e      	subs	r2, #30
 8000304:	2001      	movs	r0, #1
 8000306:	fa00 f202 	lsl.w	r2, r0, r2
 800030a:	4313      	orrs	r3, r2
 800030c:	618b      	str	r3, [r1, #24]
}
 800030e:	e008      	b.n	8000322 <MRCC_voidEnablePeripheral+0x5a>
		SET_BIT(RCC_REG->APB1ENR,Copy_Peripheral);
 8000310:	4906      	ldr	r1, [pc, #24]	; (800032c <MRCC_voidEnablePeripheral+0x64>)
 8000312:	4b06      	ldr	r3, [pc, #24]	; (800032c <MRCC_voidEnablePeripheral+0x64>)
 8000314:	69db      	ldr	r3, [r3, #28]
 8000316:	79fa      	ldrb	r2, [r7, #7]
 8000318:	2001      	movs	r0, #1
 800031a:	fa00 f202 	lsl.w	r2, r0, r2
 800031e:	4313      	orrs	r3, r2
 8000320:	61cb      	str	r3, [r1, #28]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40021000 	.word	0x40021000

08000330 <MRCC_u32GetSystemClock>:
void MRCC_voidClearInterrupt(RCC_Interrupt_t Interrupt){
	SET_BIT(RCC_REG->CIR,(Interrupt+16));
}


u32 MRCC_u32GetSystemClock(void){
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
	u8 Local_u8ClockSource = (RCC_REG->CFGR>>2) & 3;
 8000336:	4b2c      	ldr	r3, [pc, #176]	; (80003e8 <MRCC_u32GetSystemClock+0xb8>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	089b      	lsrs	r3, r3, #2
 800033c:	b2db      	uxtb	r3, r3
 800033e:	f003 0303 	and.w	r3, r3, #3
 8000342:	70fb      	strb	r3, [r7, #3]
	u8 Local_u8PLLSource = (RCC_REG->CFGR>>16) & 3;
 8000344:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <MRCC_u32GetSystemClock+0xb8>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	0c1b      	lsrs	r3, r3, #16
 800034a:	b2db      	uxtb	r3, r3
 800034c:	f003 0303 	and.w	r3, r3, #3
 8000350:	70bb      	strb	r3, [r7, #2]
	u8 Local_u8PLLMultiplier = (RCC_REG->CFGR>>18) & 7;
 8000352:	4b25      	ldr	r3, [pc, #148]	; (80003e8 <MRCC_u32GetSystemClock+0xb8>)
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	0c9b      	lsrs	r3, r3, #18
 8000358:	b2db      	uxtb	r3, r3
 800035a:	f003 0307 	and.w	r3, r3, #7
 800035e:	707b      	strb	r3, [r7, #1]
	Local_u8PLLMultiplier = (Local_u8PLLMultiplier == 15)?	16:Local_u8PLLMultiplier+2;
 8000360:	787b      	ldrb	r3, [r7, #1]
 8000362:	2b0f      	cmp	r3, #15
 8000364:	d003      	beq.n	800036e <MRCC_u32GetSystemClock+0x3e>
 8000366:	787b      	ldrb	r3, [r7, #1]
 8000368:	3302      	adds	r3, #2
 800036a:	b2db      	uxtb	r3, r3
 800036c:	e000      	b.n	8000370 <MRCC_u32GetSystemClock+0x40>
 800036e:	2310      	movs	r3, #16
 8000370:	707b      	strb	r3, [r7, #1]
	u32 Local_u32SystemClock = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	607b      	str	r3, [r7, #4]
	switch(Local_u8ClockSource){
 8000376:	78fb      	ldrb	r3, [r7, #3]
 8000378:	2b01      	cmp	r3, #1
 800037a:	d006      	beq.n	800038a <MRCC_u32GetSystemClock+0x5a>
 800037c:	2b02      	cmp	r3, #2
 800037e:	d007      	beq.n	8000390 <MRCC_u32GetSystemClock+0x60>
 8000380:	2b00      	cmp	r3, #0
 8000382:	d127      	bne.n	80003d4 <MRCC_u32GetSystemClock+0xa4>
		case 0:	//HSI
			Local_u32SystemClock = 8000000UL;
 8000384:	4b19      	ldr	r3, [pc, #100]	; (80003ec <MRCC_u32GetSystemClock+0xbc>)
 8000386:	607b      	str	r3, [r7, #4]
			break;
 8000388:	e027      	b.n	80003da <MRCC_u32GetSystemClock+0xaa>
		case 1:	//HSE
			Local_u32SystemClock = RCC_HSE_VALUE;
 800038a:	4b18      	ldr	r3, [pc, #96]	; (80003ec <MRCC_u32GetSystemClock+0xbc>)
 800038c:	607b      	str	r3, [r7, #4]
			break;
 800038e:	e024      	b.n	80003da <MRCC_u32GetSystemClock+0xaa>
		case 2:	//PLL
			switch(Local_u8PLLSource){
 8000390:	78bb      	ldrb	r3, [r7, #2]
 8000392:	2b03      	cmp	r3, #3
 8000394:	d816      	bhi.n	80003c4 <MRCC_u32GetSystemClock+0x94>
 8000396:	a201      	add	r2, pc, #4	; (adr r2, 800039c <MRCC_u32GetSystemClock+0x6c>)
 8000398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039c:	080003ad 	.word	0x080003ad
 80003a0:	080003b3 	.word	0x080003b3
 80003a4:	080003b9 	.word	0x080003b9
 80003a8:	080003bf 	.word	0x080003bf
				case 0:		//HSI/2
					Local_u32SystemClock = 4000000UL;
 80003ac:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <MRCC_u32GetSystemClock+0xc0>)
 80003ae:	607b      	str	r3, [r7, #4]
					break;
 80003b0:	e00a      	b.n	80003c8 <MRCC_u32GetSystemClock+0x98>
				case 1:		//HSE
					Local_u32SystemClock = RCC_HSE_VALUE;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MRCC_u32GetSystemClock+0xbc>)
 80003b4:	607b      	str	r3, [r7, #4]
					break;
 80003b6:	e007      	b.n	80003c8 <MRCC_u32GetSystemClock+0x98>
				case 2:		//HSI/2
					Local_u32SystemClock = 4000000UL;
 80003b8:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <MRCC_u32GetSystemClock+0xc0>)
 80003ba:	607b      	str	r3, [r7, #4]
					break;
 80003bc:	e004      	b.n	80003c8 <MRCC_u32GetSystemClock+0x98>
				case 3:		//HSE/2
					Local_u32SystemClock = RCC_HSE_VALUE/2;
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <MRCC_u32GetSystemClock+0xc0>)
 80003c0:	607b      	str	r3, [r7, #4]
					break;
 80003c2:	e001      	b.n	80003c8 <MRCC_u32GetSystemClock+0x98>

				default:
					Local_u32SystemClock = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	607b      	str	r3, [r7, #4]
			}
			Local_u32SystemClock *= Local_u8PLLMultiplier;
 80003c8:	787a      	ldrb	r2, [r7, #1]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	fb02 f303 	mul.w	r3, r2, r3
 80003d0:	607b      	str	r3, [r7, #4]
			break;
 80003d2:	e002      	b.n	80003da <MRCC_u32GetSystemClock+0xaa>
		default:
			Local_u32SystemClock = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	607b      	str	r3, [r7, #4]
		break;
 80003d8:	bf00      	nop
	}
	return Local_u32SystemClock;
 80003da:	687b      	ldr	r3, [r7, #4]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000
 80003ec:	007a1200 	.word	0x007a1200
 80003f0:	003d0900 	.word	0x003d0900

080003f4 <MRCC_u32GetBusClock>:

u32 MRCC_u32GetBusClock(RCC_BUS_t Copy_Bus){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
	u32 Local_u32BusClock = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
	u32 Local_u32SystemClock = MRCC_u32GetSystemClock();
 8000402:	f7ff ff95 	bl	8000330 <MRCC_u32GetSystemClock>
 8000406:	60f8      	str	r0, [r7, #12]
	u16 Local_u16Division = 1;
 8000408:	2301      	movs	r3, #1
 800040a:	82fb      	strh	r3, [r7, #22]
	u8 Local_u8Index = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	72fb      	strb	r3, [r7, #11]
	switch(Copy_Bus){
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d01d      	beq.n	8000452 <MRCC_u32GetBusClock+0x5e>
 8000416:	2b02      	cmp	r3, #2
 8000418:	d034      	beq.n	8000484 <MRCC_u32GetBusClock+0x90>
 800041a:	2b00      	cmp	r3, #0
 800041c:	d000      	beq.n	8000420 <MRCC_u32GetBusClock+0x2c>
		case RCC_BUS_APB2:
			Local_u8Index = (((RCC_REG->CFGR >> 11) & 3) < 4)?	0:((RCC_REG->CFGR >> 11) & 3)-4;
			Local_u16Division = PRCC_u16APBPescalars[Local_u8Index];
			break;
		default:
			break;
 800041e:	e04a      	b.n	80004b6 <MRCC_u32GetBusClock+0xc2>
		    Local_u8Index = (((RCC_REG->CFGR>>4)&7) < 8)?	0:((RCC_REG->CFGR>>4)&7)-8;
 8000420:	4b2a      	ldr	r3, [pc, #168]	; (80004cc <MRCC_u32GetBusClock+0xd8>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	f003 0307 	and.w	r3, r3, #7
 800042a:	2b07      	cmp	r3, #7
 800042c:	d909      	bls.n	8000442 <MRCC_u32GetBusClock+0x4e>
 800042e:	4b27      	ldr	r3, [pc, #156]	; (80004cc <MRCC_u32GetBusClock+0xd8>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	091b      	lsrs	r3, r3, #4
 8000434:	b2db      	uxtb	r3, r3
 8000436:	f003 0307 	and.w	r3, r3, #7
 800043a:	b2db      	uxtb	r3, r3
 800043c:	3b08      	subs	r3, #8
 800043e:	b2db      	uxtb	r3, r3
 8000440:	e000      	b.n	8000444 <MRCC_u32GetBusClock+0x50>
 8000442:	2300      	movs	r3, #0
 8000444:	72fb      	strb	r3, [r7, #11]
			Local_u16Division = PRCC_u16AHBPrescalars[Local_u8Index];
 8000446:	7afb      	ldrb	r3, [r7, #11]
 8000448:	4a21      	ldr	r2, [pc, #132]	; (80004d0 <MRCC_u32GetBusClock+0xdc>)
 800044a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800044e:	82fb      	strh	r3, [r7, #22]
			break;
 8000450:	e031      	b.n	80004b6 <MRCC_u32GetBusClock+0xc2>
			Local_u8Index = (((RCC_REG->CFGR >> 8) & 3) < 4)?	0:((RCC_REG->CFGR >> 8) & 3)-4;
 8000452:	4b1e      	ldr	r3, [pc, #120]	; (80004cc <MRCC_u32GetBusClock+0xd8>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	0a1b      	lsrs	r3, r3, #8
 8000458:	f003 0303 	and.w	r3, r3, #3
 800045c:	2b03      	cmp	r3, #3
 800045e:	d909      	bls.n	8000474 <MRCC_u32GetBusClock+0x80>
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <MRCC_u32GetBusClock+0xd8>)
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	0a1b      	lsrs	r3, r3, #8
 8000466:	b2db      	uxtb	r3, r3
 8000468:	f003 0303 	and.w	r3, r3, #3
 800046c:	b2db      	uxtb	r3, r3
 800046e:	3b04      	subs	r3, #4
 8000470:	b2db      	uxtb	r3, r3
 8000472:	e000      	b.n	8000476 <MRCC_u32GetBusClock+0x82>
 8000474:	2300      	movs	r3, #0
 8000476:	72fb      	strb	r3, [r7, #11]
			Local_u16Division = PRCC_u16APBPescalars[Local_u8Index];
 8000478:	7afb      	ldrb	r3, [r7, #11]
 800047a:	4a16      	ldr	r2, [pc, #88]	; (80004d4 <MRCC_u32GetBusClock+0xe0>)
 800047c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000480:	82fb      	strh	r3, [r7, #22]
			break;
 8000482:	e018      	b.n	80004b6 <MRCC_u32GetBusClock+0xc2>
			Local_u8Index = (((RCC_REG->CFGR >> 11) & 3) < 4)?	0:((RCC_REG->CFGR >> 11) & 3)-4;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MRCC_u32GetBusClock+0xd8>)
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	0adb      	lsrs	r3, r3, #11
 800048a:	f003 0303 	and.w	r3, r3, #3
 800048e:	2b03      	cmp	r3, #3
 8000490:	d909      	bls.n	80004a6 <MRCC_u32GetBusClock+0xb2>
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MRCC_u32GetBusClock+0xd8>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	0adb      	lsrs	r3, r3, #11
 8000498:	b2db      	uxtb	r3, r3
 800049a:	f003 0303 	and.w	r3, r3, #3
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	3b04      	subs	r3, #4
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	e000      	b.n	80004a8 <MRCC_u32GetBusClock+0xb4>
 80004a6:	2300      	movs	r3, #0
 80004a8:	72fb      	strb	r3, [r7, #11]
			Local_u16Division = PRCC_u16APBPescalars[Local_u8Index];
 80004aa:	7afb      	ldrb	r3, [r7, #11]
 80004ac:	4a09      	ldr	r2, [pc, #36]	; (80004d4 <MRCC_u32GetBusClock+0xe0>)
 80004ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004b2:	82fb      	strh	r3, [r7, #22]
			break;
 80004b4:	bf00      	nop

	}
	Local_u32BusClock = Local_u32SystemClock/Local_u16Division;
 80004b6:	8afb      	ldrh	r3, [r7, #22]
 80004b8:	68fa      	ldr	r2, [r7, #12]
 80004ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80004be:	613b      	str	r3, [r7, #16]
	return Local_u32BusClock;
 80004c0:	693b      	ldr	r3, [r7, #16]
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3718      	adds	r7, #24
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000
 80004d0:	20000000 	.word	0x20000000
 80004d4:	20000014 	.word	0x20000014

080004d8 <RCC_IRQHandler>:


void RCC_IRQHandler(void){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	if(CHK_BIT(RCC_REG->CIR,RCC_INTERRUPT_LSI_READY)){
 80004dc:	4b30      	ldr	r3, [pc, #192]	; (80005a0 <RCC_IRQHandler+0xc8>)
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	f003 0301 	and.w	r3, r3, #1
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d00c      	beq.n	8000502 <RCC_IRQHandler+0x2a>
		if (PRCC_voidCallBacks[0] != 0)
 80004e8:	4b2e      	ldr	r3, [pc, #184]	; (80005a4 <RCC_IRQHandler+0xcc>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d002      	beq.n	80004f6 <RCC_IRQHandler+0x1e>
			PRCC_voidCallBacks[0]();
 80004f0:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <RCC_IRQHandler+0xcc>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4798      	blx	r3
		SET_BIT(RCC_REG->CIR,16);
 80004f6:	4a2a      	ldr	r2, [pc, #168]	; (80005a0 <RCC_IRQHandler+0xc8>)
 80004f8:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <RCC_IRQHandler+0xc8>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000500:	6093      	str	r3, [r2, #8]
	}

	if(CHK_BIT(RCC_REG->CIR,RCC_INTERRUPT_LSE_READY)){
 8000502:	4b27      	ldr	r3, [pc, #156]	; (80005a0 <RCC_IRQHandler+0xc8>)
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	f003 0302 	and.w	r3, r3, #2
 800050a:	2b00      	cmp	r3, #0
 800050c:	d00c      	beq.n	8000528 <RCC_IRQHandler+0x50>
		if (PRCC_voidCallBacks[1] != 0)
 800050e:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <RCC_IRQHandler+0xcc>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <RCC_IRQHandler+0x44>
			PRCC_voidCallBacks[1]();
 8000516:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <RCC_IRQHandler+0xcc>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	4798      	blx	r3
		SET_BIT(RCC_REG->CIR,17);
 800051c:	4a20      	ldr	r2, [pc, #128]	; (80005a0 <RCC_IRQHandler+0xc8>)
 800051e:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <RCC_IRQHandler+0xc8>)
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000526:	6093      	str	r3, [r2, #8]
	}

	if(CHK_BIT(RCC_REG->CIR,RCC_INTERRUPT_HSI_READY)){
 8000528:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <RCC_IRQHandler+0xc8>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	2b00      	cmp	r3, #0
 8000532:	d00c      	beq.n	800054e <RCC_IRQHandler+0x76>
			if (PRCC_voidCallBacks[2] != 0)
 8000534:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <RCC_IRQHandler+0xcc>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <RCC_IRQHandler+0x6a>
				PRCC_voidCallBacks[2]();
 800053c:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <RCC_IRQHandler+0xcc>)
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	4798      	blx	r3
			SET_BIT(RCC_REG->CIR,18);
 8000542:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <RCC_IRQHandler+0xc8>)
 8000544:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <RCC_IRQHandler+0xc8>)
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800054c:	6093      	str	r3, [r2, #8]
		}

	if(CHK_BIT(RCC_REG->CIR,RCC_INTERRUPT_LSE_READY)){
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <RCC_IRQHandler+0xc8>)
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	2b00      	cmp	r3, #0
 8000558:	d00c      	beq.n	8000574 <RCC_IRQHandler+0x9c>
			if (PRCC_voidCallBacks[3] != 0)
 800055a:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <RCC_IRQHandler+0xcc>)
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d002      	beq.n	8000568 <RCC_IRQHandler+0x90>
				PRCC_voidCallBacks[3]();
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <RCC_IRQHandler+0xcc>)
 8000564:	68db      	ldr	r3, [r3, #12]
 8000566:	4798      	blx	r3
			SET_BIT(RCC_REG->CIR,19);
 8000568:	4a0d      	ldr	r2, [pc, #52]	; (80005a0 <RCC_IRQHandler+0xc8>)
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <RCC_IRQHandler+0xc8>)
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000572:	6093      	str	r3, [r2, #8]
		}

	if(CHK_BIT(RCC_REG->CIR,RCC_INTERRUPT_PLL_READY)){
 8000574:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <RCC_IRQHandler+0xc8>)
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	f003 0310 	and.w	r3, r3, #16
 800057c:	2b00      	cmp	r3, #0
 800057e:	d00c      	beq.n	800059a <RCC_IRQHandler+0xc2>
			if (PRCC_voidCallBacks[4] != 0)
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <RCC_IRQHandler+0xcc>)
 8000582:	691b      	ldr	r3, [r3, #16]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d002      	beq.n	800058e <RCC_IRQHandler+0xb6>
				PRCC_voidCallBacks[4]();
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <RCC_IRQHandler+0xcc>)
 800058a:	691b      	ldr	r3, [r3, #16]
 800058c:	4798      	blx	r3
			SET_BIT(RCC_REG->CIR,20);
 800058e:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <RCC_IRQHandler+0xc8>)
 8000590:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <RCC_IRQHandler+0xc8>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	6093      	str	r3, [r2, #8]
		}
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000
 80005a4:	20000060 	.word	0x20000060

080005a8 <MGPIO_voidSetPinDirection>:

#include "GPIO_interface.h"
#include "GPIO_private.h"


void MGPIO_voidSetPinDirection	(GPIO_Port_t Copy_Port, GPIO_Pin_t  Copy_Pin, GPIO_Direction_t Copy_Dir){
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	460b      	mov	r3, r1
 80005b4:	71bb      	strb	r3, [r7, #6]
 80005b6:	4613      	mov	r3, r2
 80005b8:	717b      	strb	r3, [r7, #5]
/*	Writes Selected Direction to pin Configuration	*/
	if (Copy_Port > GPIO_MAX_GPIO_ID)
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d84d      	bhi.n	800065c <MGPIO_voidSetPinDirection+0xb4>
		return;
	if(Copy_Pin < 8){
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	2b07      	cmp	r3, #7
 80005c4:	d821      	bhi.n	800060a <MGPIO_voidSetPinDirection+0x62>
		GPIO_REG[Copy_Port]->CRL &= ~(0xF << (Copy_Pin*4));
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	4a27      	ldr	r2, [pc, #156]	; (8000668 <MGPIO_voidSetPinDirection+0xc0>)
 80005ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ce:	79fa      	ldrb	r2, [r7, #7]
 80005d0:	4925      	ldr	r1, [pc, #148]	; (8000668 <MGPIO_voidSetPinDirection+0xc0>)
 80005d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80005d6:	6812      	ldr	r2, [r2, #0]
 80005d8:	79b9      	ldrb	r1, [r7, #6]
 80005da:	0089      	lsls	r1, r1, #2
 80005dc:	200f      	movs	r0, #15
 80005de:	fa00 f101 	lsl.w	r1, r0, r1
 80005e2:	43c9      	mvns	r1, r1
 80005e4:	400a      	ands	r2, r1
 80005e6:	601a      	str	r2, [r3, #0]
		GPIO_REG[Copy_Port]->CRL |= Copy_Dir << (Copy_Pin*4);
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <MGPIO_voidSetPinDirection+0xc0>)
 80005ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f0:	79fa      	ldrb	r2, [r7, #7]
 80005f2:	491d      	ldr	r1, [pc, #116]	; (8000668 <MGPIO_voidSetPinDirection+0xc0>)
 80005f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80005f8:	6812      	ldr	r2, [r2, #0]
 80005fa:	7978      	ldrb	r0, [r7, #5]
 80005fc:	79b9      	ldrb	r1, [r7, #6]
 80005fe:	0089      	lsls	r1, r1, #2
 8000600:	fa00 f101 	lsl.w	r1, r0, r1
 8000604:	430a      	orrs	r2, r1
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	e029      	b.n	800065e <MGPIO_voidSetPinDirection+0xb6>
	}
	else if (Copy_Pin < 16){
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	2b0f      	cmp	r3, #15
 800060e:	d826      	bhi.n	800065e <MGPIO_voidSetPinDirection+0xb6>
		Copy_Pin %= 8;
 8000610:	79bb      	ldrb	r3, [r7, #6]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	71bb      	strb	r3, [r7, #6]
		GPIO_REG[Copy_Port]->CRH &= ~(0xF << (Copy_Pin*4));
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	4a13      	ldr	r2, [pc, #76]	; (8000668 <MGPIO_voidSetPinDirection+0xc0>)
 800061c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000620:	79fa      	ldrb	r2, [r7, #7]
 8000622:	4911      	ldr	r1, [pc, #68]	; (8000668 <MGPIO_voidSetPinDirection+0xc0>)
 8000624:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000628:	6852      	ldr	r2, [r2, #4]
 800062a:	79b9      	ldrb	r1, [r7, #6]
 800062c:	0089      	lsls	r1, r1, #2
 800062e:	200f      	movs	r0, #15
 8000630:	fa00 f101 	lsl.w	r1, r0, r1
 8000634:	43c9      	mvns	r1, r1
 8000636:	400a      	ands	r2, r1
 8000638:	605a      	str	r2, [r3, #4]
		GPIO_REG[Copy_Port]->CRH |= Copy_Dir << (Copy_Pin*4);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <MGPIO_voidSetPinDirection+0xc0>)
 800063e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000642:	79fa      	ldrb	r2, [r7, #7]
 8000644:	4908      	ldr	r1, [pc, #32]	; (8000668 <MGPIO_voidSetPinDirection+0xc0>)
 8000646:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800064a:	6852      	ldr	r2, [r2, #4]
 800064c:	7978      	ldrb	r0, [r7, #5]
 800064e:	79b9      	ldrb	r1, [r7, #6]
 8000650:	0089      	lsls	r1, r1, #2
 8000652:	fa00 f101 	lsl.w	r1, r0, r1
 8000656:	430a      	orrs	r2, r1
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	e000      	b.n	800065e <MGPIO_voidSetPinDirection+0xb6>
		return;
 800065c:	bf00      	nop
	}
}
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	2000001c 	.word	0x2000001c

0800066c <MGPIO_voidSetPin>:
void MGPIO_voidSetPortPull(GPIO_Port_t Copy_Port, GPIO_Pull_t Copy_Pull){
	GPIO_REG[Copy_Port]->BSRR = (0xFFFF<<Copy_Pull);
}


void MGPIO_voidSetPin			(GPIO_Port_t Copy_Port, GPIO_Pin_t Copy_Pin){
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	460a      	mov	r2, r1
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	4613      	mov	r3, r2
 800067a:	71bb      	strb	r3, [r7, #6]
/*	Writes 1 to first half of BSRR register setting pin high	*/
	if (Copy_Port > GPIO_MAX_GPIO_ID)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b02      	cmp	r3, #2
 8000680:	d809      	bhi.n	8000696 <MGPIO_voidSetPin+0x2a>
		return;
	GPIO_REG[Copy_Port]->BSRR = (1<<Copy_Pin);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <MGPIO_voidSetPin+0x34>)
 8000686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800068a:	79ba      	ldrb	r2, [r7, #6]
 800068c:	2101      	movs	r1, #1
 800068e:	fa01 f202 	lsl.w	r2, r1, r2
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	e000      	b.n	8000698 <MGPIO_voidSetPin+0x2c>
		return;
 8000696:	bf00      	nop
}
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	2000001c 	.word	0x2000001c

080006a4 <MGPIO_voidClearPin>:
	if (Copy_Port > GPIO_MAX_GPIO_ID)
		return;
	GPIO_REG[Copy_Port]->BSRR = 0xFFFF;
}

void MGPIO_voidClearPin			(GPIO_Port_t Copy_Port, GPIO_Pin_t Copy_Pin){
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	460a      	mov	r2, r1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	4613      	mov	r3, r2
 80006b2:	71bb      	strb	r3, [r7, #6]
/*	Writes 1 to in second half of BSRR register setting pin low	*/
	if (Copy_Port > GPIO_MAX_GPIO_ID)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d80a      	bhi.n	80006d0 <MGPIO_voidClearPin+0x2c>
		return;
	GPIO_REG[Copy_Port]->BSRR = (1<<(Copy_Pin+16));
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4a07      	ldr	r2, [pc, #28]	; (80006dc <MGPIO_voidClearPin+0x38>)
 80006be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c2:	79ba      	ldrb	r2, [r7, #6]
 80006c4:	3210      	adds	r2, #16
 80006c6:	2101      	movs	r1, #1
 80006c8:	fa01 f202 	lsl.w	r2, r1, r2
 80006cc:	611a      	str	r2, [r3, #16]
 80006ce:	e000      	b.n	80006d2 <MGPIO_voidClearPin+0x2e>
		return;
 80006d0:	bf00      	nop
}
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	2000001c 	.word	0x2000001c

080006e0 <MAFIO_voidRemapI2C1>:
	CLR_BIT(AFIO_REG->MAPR,2);
	AFIO_REG->MAPR |= (Mode << 2);
}


void MAFIO_voidRemapI2C1(AFIO_I2C1Mode_t Mode){
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	CLR_BIT(AFIO_REG->MAPR,1);
 80006ea:	4a09      	ldr	r2, [pc, #36]	; (8000710 <MAFIO_voidRemapI2C1+0x30>)
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MAFIO_voidRemapI2C1+0x30>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	f023 0302 	bic.w	r3, r3, #2
 80006f4:	6053      	str	r3, [r2, #4]
	AFIO_REG->MAPR |= (Mode << 1);
 80006f6:	4906      	ldr	r1, [pc, #24]	; (8000710 <MAFIO_voidRemapI2C1+0x30>)
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <MAFIO_voidRemapI2C1+0x30>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	79fa      	ldrb	r2, [r7, #7]
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	4313      	orrs	r3, r2
 8000702:	604b      	str	r3, [r1, #4]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40010000 	.word	0x40010000

08000714 <EXTI0_IRQHandler>:
		return;
	SET_BIT(EXTI_REG->PR,Line);
}


void EXTI0_IRQHandler(void){
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	if(PEXTI_CallBacks[0] != 0)
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <EXTI0_IRQHandler+0x24>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <EXTI0_IRQHandler+0x12>
		PEXTI_CallBacks[0]();
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <EXTI0_IRQHandler+0x24>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4798      	blx	r3
	SET_BIT(EXTI_REG->PR,0);
 8000726:	4a05      	ldr	r2, [pc, #20]	; (800073c <EXTI0_IRQHandler+0x28>)
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <EXTI0_IRQHandler+0x28>)
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6153      	str	r3, [r2, #20]
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000078 	.word	0x20000078
 800073c:	40010400 	.word	0x40010400

08000740 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	if(PEXTI_CallBacks[1] != 0)
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <EXTI1_IRQHandler+0x24>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d002      	beq.n	8000752 <EXTI1_IRQHandler+0x12>
		PEXTI_CallBacks[1]();
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <EXTI1_IRQHandler+0x24>)
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	4798      	blx	r3
	SET_BIT(EXTI_REG->PR,1);
 8000752:	4a05      	ldr	r2, [pc, #20]	; (8000768 <EXTI1_IRQHandler+0x28>)
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <EXTI1_IRQHandler+0x28>)
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6153      	str	r3, [r2, #20]
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000078 	.word	0x20000078
 8000768:	40010400 	.word	0x40010400

0800076c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	if(PEXTI_CallBacks[2] != 0)
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <EXTI2_IRQHandler+0x24>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d002      	beq.n	800077e <EXTI2_IRQHandler+0x12>
		PEXTI_CallBacks[2]();
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <EXTI2_IRQHandler+0x24>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	4798      	blx	r3
	SET_BIT(EXTI_REG->PR,2);
 800077e:	4a05      	ldr	r2, [pc, #20]	; (8000794 <EXTI2_IRQHandler+0x28>)
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <EXTI2_IRQHandler+0x28>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6153      	str	r3, [r2, #20]
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000078 	.word	0x20000078
 8000794:	40010400 	.word	0x40010400

08000798 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	if(PEXTI_CallBacks[3] != 0)
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <EXTI3_IRQHandler+0x24>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d002      	beq.n	80007aa <EXTI3_IRQHandler+0x12>
		PEXTI_CallBacks[3]();
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <EXTI3_IRQHandler+0x24>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	4798      	blx	r3
	SET_BIT(EXTI_REG->PR,3);
 80007aa:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <EXTI3_IRQHandler+0x28>)
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <EXTI3_IRQHandler+0x28>)
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6153      	str	r3, [r2, #20]
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000078 	.word	0x20000078
 80007c0:	40010400 	.word	0x40010400

080007c4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	if(PEXTI_CallBacks[4] != 0)
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <EXTI4_IRQHandler+0x24>)
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <EXTI4_IRQHandler+0x12>
		PEXTI_CallBacks[4]();
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <EXTI4_IRQHandler+0x24>)
 80007d2:	691b      	ldr	r3, [r3, #16]
 80007d4:	4798      	blx	r3
	SET_BIT(EXTI_REG->PR,4);
 80007d6:	4a05      	ldr	r2, [pc, #20]	; (80007ec <EXTI4_IRQHandler+0x28>)
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <EXTI4_IRQHandler+0x28>)
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	f043 0310 	orr.w	r3, r3, #16
 80007e0:	6153      	str	r3, [r2, #20]
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000078 	.word	0x20000078
 80007ec:	40010400 	.word	0x40010400

080007f0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	if(CHK_BIT(EXTI_REG->PR,5)){
 80007f4:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <EXTI9_5_IRQHandler+0xc8>)
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	f003 0320 	and.w	r3, r3, #32
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00c      	beq.n	800081a <EXTI9_5_IRQHandler+0x2a>
		if(PEXTI_CallBacks[5] != 0)
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <EXTI9_5_IRQHandler+0xcc>)
 8000802:	695b      	ldr	r3, [r3, #20]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d002      	beq.n	800080e <EXTI9_5_IRQHandler+0x1e>
			PEXTI_CallBacks[5]();
 8000808:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <EXTI9_5_IRQHandler+0xcc>)
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	4798      	blx	r3
		SET_BIT(EXTI_REG->PR,5);
 800080e:	4a2a      	ldr	r2, [pc, #168]	; (80008b8 <EXTI9_5_IRQHandler+0xc8>)
 8000810:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <EXTI9_5_IRQHandler+0xc8>)
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	f043 0320 	orr.w	r3, r3, #32
 8000818:	6153      	str	r3, [r2, #20]
	}
	
	if(CHK_BIT(EXTI_REG->PR,6)){
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <EXTI9_5_IRQHandler+0xc8>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000822:	2b00      	cmp	r3, #0
 8000824:	d00c      	beq.n	8000840 <EXTI9_5_IRQHandler+0x50>
		if(PEXTI_CallBacks[6] != 0)
 8000826:	4b25      	ldr	r3, [pc, #148]	; (80008bc <EXTI9_5_IRQHandler+0xcc>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d002      	beq.n	8000834 <EXTI9_5_IRQHandler+0x44>
			PEXTI_CallBacks[6]();
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <EXTI9_5_IRQHandler+0xcc>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	4798      	blx	r3
		SET_BIT(EXTI_REG->PR,6);
 8000834:	4a20      	ldr	r2, [pc, #128]	; (80008b8 <EXTI9_5_IRQHandler+0xc8>)
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <EXTI9_5_IRQHandler+0xc8>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800083e:	6153      	str	r3, [r2, #20]
	}
	
	if(CHK_BIT(EXTI_REG->PR,7)){
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <EXTI9_5_IRQHandler+0xc8>)
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00c      	beq.n	8000866 <EXTI9_5_IRQHandler+0x76>
		if(PEXTI_CallBacks[7] != 0)
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <EXTI9_5_IRQHandler+0xcc>)
 800084e:	69db      	ldr	r3, [r3, #28]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <EXTI9_5_IRQHandler+0x6a>
			PEXTI_CallBacks[7]();
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <EXTI9_5_IRQHandler+0xcc>)
 8000856:	69db      	ldr	r3, [r3, #28]
 8000858:	4798      	blx	r3
		SET_BIT(EXTI_REG->PR,7);
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <EXTI9_5_IRQHandler+0xc8>)
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <EXTI9_5_IRQHandler+0xc8>)
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	6153      	str	r3, [r2, #20]
	}
	
	if(CHK_BIT(EXTI_REG->PR,8)){
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <EXTI9_5_IRQHandler+0xc8>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800086e:	2b00      	cmp	r3, #0
 8000870:	d00c      	beq.n	800088c <EXTI9_5_IRQHandler+0x9c>
		if(PEXTI_CallBacks[8] != 0)
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <EXTI9_5_IRQHandler+0xcc>)
 8000874:	6a1b      	ldr	r3, [r3, #32]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d002      	beq.n	8000880 <EXTI9_5_IRQHandler+0x90>
			PEXTI_CallBacks[8]();
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <EXTI9_5_IRQHandler+0xcc>)
 800087c:	6a1b      	ldr	r3, [r3, #32]
 800087e:	4798      	blx	r3
		SET_BIT(EXTI_REG->PR,8);
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <EXTI9_5_IRQHandler+0xc8>)
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <EXTI9_5_IRQHandler+0xc8>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800088a:	6153      	str	r3, [r2, #20]
	}
	
	if(CHK_BIT(EXTI_REG->PR,9)){
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <EXTI9_5_IRQHandler+0xc8>)
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00c      	beq.n	80008b2 <EXTI9_5_IRQHandler+0xc2>
		if(PEXTI_CallBacks[9] != 0)
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <EXTI9_5_IRQHandler+0xcc>)
 800089a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089c:	2b00      	cmp	r3, #0
 800089e:	d002      	beq.n	80008a6 <EXTI9_5_IRQHandler+0xb6>
			PEXTI_CallBacks[9]();
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <EXTI9_5_IRQHandler+0xcc>)
 80008a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a4:	4798      	blx	r3
		SET_BIT(EXTI_REG->PR,9);
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <EXTI9_5_IRQHandler+0xc8>)
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <EXTI9_5_IRQHandler+0xc8>)
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b0:	6153      	str	r3, [r2, #20]
	}
	
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40010400 	.word	0x40010400
 80008bc:	20000078 	.word	0x20000078

080008c0 <PVD_IRQHandler>:
		SET_BIT(EXTI_REG->PR,15);
	}
}


void PVD_IRQHandler(void){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	if(CHK_BIT(EXTI_REG->PR,16)){
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <PVD_IRQHandler+0x30>)
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d00c      	beq.n	80008ea <PVD_IRQHandler+0x2a>
		if(PEXTI_CallBacks[16] != 0)
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <PVD_IRQHandler+0x34>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <PVD_IRQHandler+0x1e>
			PEXTI_CallBacks[16]();
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <PVD_IRQHandler+0x34>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	4798      	blx	r3
		SET_BIT(EXTI_REG->PR,16);
 80008de:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <PVD_IRQHandler+0x30>)
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <PVD_IRQHandler+0x30>)
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008e8:	6153      	str	r3, [r2, #20]
	}
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40010400 	.word	0x40010400
 80008f4:	20000078 	.word	0x20000078

080008f8 <RTCAlarm_IRQHandler>:


void RTCAlarm_IRQHandler(void){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	if(CHK_BIT(EXTI_REG->PR,17)){
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <RTCAlarm_IRQHandler+0x30>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00c      	beq.n	8000922 <RTCAlarm_IRQHandler+0x2a>
		if(PEXTI_CallBacks[17] != 0)
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <RTCAlarm_IRQHandler+0x34>)
 800090a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090c:	2b00      	cmp	r3, #0
 800090e:	d002      	beq.n	8000916 <RTCAlarm_IRQHandler+0x1e>
			PEXTI_CallBacks[17]();
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <RTCAlarm_IRQHandler+0x34>)
 8000912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000914:	4798      	blx	r3
		SET_BIT(EXTI_REG->PR,17);
 8000916:	4a04      	ldr	r2, [pc, #16]	; (8000928 <RTCAlarm_IRQHandler+0x30>)
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <RTCAlarm_IRQHandler+0x30>)
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000920:	6153      	str	r3, [r2, #20]
	}

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40010400 	.word	0x40010400
 800092c:	20000078 	.word	0x20000078

08000930 <USBWakeUp_IRQHandler>:

void USBWakeUp_IRQHandler(void){
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	if(CHK_BIT(EXTI_REG->PR,18)){
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <USBWakeUp_IRQHandler+0x30>)
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800093c:	2b00      	cmp	r3, #0
 800093e:	d00c      	beq.n	800095a <USBWakeUp_IRQHandler+0x2a>
		if(PEXTI_CallBacks[18] != 0)
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <USBWakeUp_IRQHandler+0x34>)
 8000942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000944:	2b00      	cmp	r3, #0
 8000946:	d002      	beq.n	800094e <USBWakeUp_IRQHandler+0x1e>
			PEXTI_CallBacks[18]();
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <USBWakeUp_IRQHandler+0x34>)
 800094a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800094c:	4798      	blx	r3
		SET_BIT(EXTI_REG->PR,18);
 800094e:	4a04      	ldr	r2, [pc, #16]	; (8000960 <USBWakeUp_IRQHandler+0x30>)
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <USBWakeUp_IRQHandler+0x30>)
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000958:	6153      	str	r3, [r2, #20]
	}
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40010400 	.word	0x40010400
 8000964:	20000078 	.word	0x20000078

08000968 <ADC1_2_IRQHandler>:
	if(ADC > ADC2 || Interrupt > ADC_INTERRUPT_END_INJECTED || Interrupt < ADC_INTERRUPT_END_REGULAR)
		return;
	ADCSInterruptHandlers[ADC][Interrupt] = CallBack;
}

void ADC1_2_IRQHandler(void){
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	if(CHK_BIT(ADCS[ADC1]->SR,0) && ADCSInterruptHandlers[0][1] != 0){	//Analog WatchDog, ADC1
 800096c:	4b42      	ldr	r3, [pc, #264]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	2b00      	cmp	r3, #0
 8000978:	d00e      	beq.n	8000998 <ADC1_2_IRQHandler+0x30>
 800097a:	4b40      	ldr	r3, [pc, #256]	; (8000a7c <ADC1_2_IRQHandler+0x114>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00a      	beq.n	8000998 <ADC1_2_IRQHandler+0x30>
		ADCSInterruptHandlers[0][1]();
 8000982:	4b3e      	ldr	r3, [pc, #248]	; (8000a7c <ADC1_2_IRQHandler+0x114>)
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	4798      	blx	r3
		ADCS[ADC1]->SR &= ~1;
 8000988:	4b3b      	ldr	r3, [pc, #236]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a3a      	ldr	r2, [pc, #232]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 800098e:	6812      	ldr	r2, [r2, #0]
 8000990:	6812      	ldr	r2, [r2, #0]
 8000992:	f022 0201 	bic.w	r2, r2, #1
 8000996:	601a      	str	r2, [r3, #0]
	}

	if(CHK_BIT(ADCS[ADC1]->SR,1) && ADCSInterruptHandlers[0][0] != 0){	//End of Regular Conversion, ADC1
 8000998:	4b37      	ldr	r3, [pc, #220]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d00e      	beq.n	80009c4 <ADC1_2_IRQHandler+0x5c>
 80009a6:	4b35      	ldr	r3, [pc, #212]	; (8000a7c <ADC1_2_IRQHandler+0x114>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d00a      	beq.n	80009c4 <ADC1_2_IRQHandler+0x5c>
		ADCSInterruptHandlers[0][0]();
 80009ae:	4b33      	ldr	r3, [pc, #204]	; (8000a7c <ADC1_2_IRQHandler+0x114>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4798      	blx	r3
		ADCS[ADC1]->SR &= ~2;
 80009b4:	4b30      	ldr	r3, [pc, #192]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a2f      	ldr	r2, [pc, #188]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 80009ba:	6812      	ldr	r2, [r2, #0]
 80009bc:	6812      	ldr	r2, [r2, #0]
 80009be:	f022 0202 	bic.w	r2, r2, #2
 80009c2:	601a      	str	r2, [r3, #0]
	}

	if(CHK_BIT(ADCS[ADC1]->SR,2) && ADCSInterruptHandlers[0][2] != 0){	//End of Injected Conversion, ADC1
 80009c4:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00e      	beq.n	80009f0 <ADC1_2_IRQHandler+0x88>
 80009d2:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <ADC1_2_IRQHandler+0x114>)
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00a      	beq.n	80009f0 <ADC1_2_IRQHandler+0x88>
		ADCSInterruptHandlers[0][2]();
 80009da:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <ADC1_2_IRQHandler+0x114>)
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	4798      	blx	r3
		ADCS[ADC1]->SR &= ~4;
 80009e0:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a24      	ldr	r2, [pc, #144]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 80009e6:	6812      	ldr	r2, [r2, #0]
 80009e8:	6812      	ldr	r2, [r2, #0]
 80009ea:	f022 0204 	bic.w	r2, r2, #4
 80009ee:	601a      	str	r2, [r3, #0]
	}

	if(CHK_BIT(ADCS[ADC2]->SR,0) && ADCSInterruptHandlers[1][1] != 0){	//Analog WatchDog, ADC2
 80009f0:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00e      	beq.n	8000a1c <ADC1_2_IRQHandler+0xb4>
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <ADC1_2_IRQHandler+0x114>)
 8000a00:	691b      	ldr	r3, [r3, #16]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d00a      	beq.n	8000a1c <ADC1_2_IRQHandler+0xb4>
		ADCSInterruptHandlers[1][1]();
 8000a06:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <ADC1_2_IRQHandler+0x114>)
 8000a08:	691b      	ldr	r3, [r3, #16]
 8000a0a:	4798      	blx	r3
		ADCS[ADC2]->SR &= ~1;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	4a19      	ldr	r2, [pc, #100]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 8000a12:	6852      	ldr	r2, [r2, #4]
 8000a14:	6812      	ldr	r2, [r2, #0]
 8000a16:	f022 0201 	bic.w	r2, r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
	}

	if(CHK_BIT(ADCS[ADC2]->SR,1) && ADCSInterruptHandlers[1][0] != 0){	//End of Regular Conversion, ADC2
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d00e      	beq.n	8000a48 <ADC1_2_IRQHandler+0xe0>
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <ADC1_2_IRQHandler+0x114>)
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00a      	beq.n	8000a48 <ADC1_2_IRQHandler+0xe0>
		ADCSInterruptHandlers[1][0]();
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <ADC1_2_IRQHandler+0x114>)
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	4798      	blx	r3
		ADCS[ADC2]->SR &= ~2;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 8000a3e:	6852      	ldr	r2, [r2, #4]
 8000a40:	6812      	ldr	r2, [r2, #0]
 8000a42:	f022 0202 	bic.w	r2, r2, #2
 8000a46:	601a      	str	r2, [r3, #0]
	}

	if(CHK_BIT(ADCS[ADC2]->SR,2) && ADCSInterruptHandlers[1][2] != 0){	//End of Injected Conversion, ADC2
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00e      	beq.n	8000a74 <ADC1_2_IRQHandler+0x10c>
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <ADC1_2_IRQHandler+0x114>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d00a      	beq.n	8000a74 <ADC1_2_IRQHandler+0x10c>
		ADCSInterruptHandlers[1][2]();
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <ADC1_2_IRQHandler+0x114>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	4798      	blx	r3
		ADCS[ADC2]->SR &= ~4;
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <ADC1_2_IRQHandler+0x110>)
 8000a6a:	6852      	ldr	r2, [r2, #4]
 8000a6c:	6812      	ldr	r2, [r2, #0]
 8000a6e:	f022 0204 	bic.w	r2, r2, #4
 8000a72:	601a      	str	r2, [r3, #0]
	}
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000028 	.word	0x20000028
 8000a7c:	200000c4 	.word	0x200000c4

08000a80 <DMA1_Channel1_IRQHandler>:
		return;
	CLR_BIT(DMA1_REG->CHANNEL[Channel].CCR,(1+Interrupt));
}


void DMA1_Channel1_IRQHandler (void){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	if(DMA1_REG->ISR & (1<<3)){
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <DMA1_Channel1_IRQHandler+0x68>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f003 0308 	and.w	r3, r3, #8
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d009      	beq.n	8000aa4 <DMA1_Channel1_IRQHandler+0x24>
		if (PDMA_CallBacks[0].TransferError != 0)
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <DMA1_Channel1_IRQHandler+0x6c>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <DMA1_Channel1_IRQHandler+0x1e>
			PDMA_CallBacks[0].TransferError();
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <DMA1_Channel1_IRQHandler+0x6c>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<3;
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <DMA1_Channel1_IRQHandler+0x68>)
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<2)){
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <DMA1_Channel1_IRQHandler+0x68>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d009      	beq.n	8000ac4 <DMA1_Channel1_IRQHandler+0x44>
		if (PDMA_CallBacks[0].HalfTransfer != 0)
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <DMA1_Channel1_IRQHandler+0x6c>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d002      	beq.n	8000abe <DMA1_Channel1_IRQHandler+0x3e>
			PDMA_CallBacks[0].HalfTransfer();
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <DMA1_Channel1_IRQHandler+0x6c>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<2;
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <DMA1_Channel1_IRQHandler+0x68>)
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<1)){
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <DMA1_Channel1_IRQHandler+0x68>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d009      	beq.n	8000ae4 <DMA1_Channel1_IRQHandler+0x64>
		if (PDMA_CallBacks[0].TransferComplete != 0)
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <DMA1_Channel1_IRQHandler+0x6c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d002      	beq.n	8000ade <DMA1_Channel1_IRQHandler+0x5e>
			PDMA_CallBacks[0].TransferComplete();
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <DMA1_Channel1_IRQHandler+0x6c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<1;
 8000ade:	4b02      	ldr	r3, [pc, #8]	; (8000ae8 <DMA1_Channel1_IRQHandler+0x68>)
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	605a      	str	r2, [r3, #4]
	}
	
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	200000dc 	.word	0x200000dc

08000af0 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler (void){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	if(DMA1_REG->ISR & (1<<7)){
 8000af4:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <DMA1_Channel2_IRQHandler+0x68>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d009      	beq.n	8000b14 <DMA1_Channel2_IRQHandler+0x24>
		if (PDMA_CallBacks[1].TransferError != 0)
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <DMA1_Channel2_IRQHandler+0x6c>)
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d002      	beq.n	8000b0e <DMA1_Channel2_IRQHandler+0x1e>
			PDMA_CallBacks[1].TransferError();
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <DMA1_Channel2_IRQHandler+0x6c>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<7;
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <DMA1_Channel2_IRQHandler+0x68>)
 8000b10:	2280      	movs	r2, #128	; 0x80
 8000b12:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<6)){
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <DMA1_Channel2_IRQHandler+0x68>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d009      	beq.n	8000b34 <DMA1_Channel2_IRQHandler+0x44>
		if (PDMA_CallBacks[1].HalfTransfer != 0)
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <DMA1_Channel2_IRQHandler+0x6c>)
 8000b22:	691b      	ldr	r3, [r3, #16]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d002      	beq.n	8000b2e <DMA1_Channel2_IRQHandler+0x3e>
			PDMA_CallBacks[1].HalfTransfer();
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <DMA1_Channel2_IRQHandler+0x6c>)
 8000b2a:	691b      	ldr	r3, [r3, #16]
 8000b2c:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<6;
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <DMA1_Channel2_IRQHandler+0x68>)
 8000b30:	2240      	movs	r2, #64	; 0x40
 8000b32:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<5)){
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <DMA1_Channel2_IRQHandler+0x68>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f003 0320 	and.w	r3, r3, #32
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d009      	beq.n	8000b54 <DMA1_Channel2_IRQHandler+0x64>
		if (PDMA_CallBacks[1].TransferComplete != 0)
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <DMA1_Channel2_IRQHandler+0x6c>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <DMA1_Channel2_IRQHandler+0x5e>
			PDMA_CallBacks[1].TransferComplete();
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <DMA1_Channel2_IRQHandler+0x6c>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<5;
 8000b4e:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <DMA1_Channel2_IRQHandler+0x68>)
 8000b50:	2220      	movs	r2, #32
 8000b52:	605a      	str	r2, [r3, #4]
	}
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	200000dc 	.word	0x200000dc

08000b60 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler (void){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	if(DMA1_REG->ISR & (1<<11)){
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <DMA1_Channel3_IRQHandler+0x70>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d00a      	beq.n	8000b86 <DMA1_Channel3_IRQHandler+0x26>
		if (PDMA_CallBacks[2].TransferError != 0)
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <DMA1_Channel3_IRQHandler+0x74>)
 8000b72:	6a1b      	ldr	r3, [r3, #32]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d002      	beq.n	8000b7e <DMA1_Channel3_IRQHandler+0x1e>
			PDMA_CallBacks[2].TransferError();
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <DMA1_Channel3_IRQHandler+0x74>)
 8000b7a:	6a1b      	ldr	r3, [r3, #32]
 8000b7c:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<11;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <DMA1_Channel3_IRQHandler+0x70>)
 8000b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b84:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<10)){
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <DMA1_Channel3_IRQHandler+0x70>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d00a      	beq.n	8000ba8 <DMA1_Channel3_IRQHandler+0x48>
		if (PDMA_CallBacks[2].HalfTransfer != 0)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <DMA1_Channel3_IRQHandler+0x74>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d002      	beq.n	8000ba0 <DMA1_Channel3_IRQHandler+0x40>
			PDMA_CallBacks[2].HalfTransfer();
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <DMA1_Channel3_IRQHandler+0x74>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<10;
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <DMA1_Channel3_IRQHandler+0x70>)
 8000ba2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ba6:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<9)){
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <DMA1_Channel3_IRQHandler+0x70>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d00a      	beq.n	8000bca <DMA1_Channel3_IRQHandler+0x6a>
		if (PDMA_CallBacks[2].TransferComplete != 0)
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <DMA1_Channel3_IRQHandler+0x74>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d002      	beq.n	8000bc2 <DMA1_Channel3_IRQHandler+0x62>
			PDMA_CallBacks[2].TransferComplete();
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <DMA1_Channel3_IRQHandler+0x74>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<9;
 8000bc2:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <DMA1_Channel3_IRQHandler+0x70>)
 8000bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc8:	605a      	str	r2, [r3, #4]
	}
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	200000dc 	.word	0x200000dc

08000bd8 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler (void){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	if(DMA1_REG->ISR & (1<<15)){
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <DMA1_Channel4_IRQHandler+0x70>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d00a      	beq.n	8000bfe <DMA1_Channel4_IRQHandler+0x26>
		if (PDMA_CallBacks[3].TransferError != 0)
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <DMA1_Channel4_IRQHandler+0x74>)
 8000bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d002      	beq.n	8000bf6 <DMA1_Channel4_IRQHandler+0x1e>
			PDMA_CallBacks[3].TransferError();
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <DMA1_Channel4_IRQHandler+0x74>)
 8000bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf4:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<15;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <DMA1_Channel4_IRQHandler+0x70>)
 8000bf8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bfc:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<14)){
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <DMA1_Channel4_IRQHandler+0x70>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00a      	beq.n	8000c20 <DMA1_Channel4_IRQHandler+0x48>
		if (PDMA_CallBacks[3].HalfTransfer != 0)
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <DMA1_Channel4_IRQHandler+0x74>)
 8000c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <DMA1_Channel4_IRQHandler+0x40>
			PDMA_CallBacks[3].HalfTransfer();
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <DMA1_Channel4_IRQHandler+0x74>)
 8000c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c16:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<14;
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <DMA1_Channel4_IRQHandler+0x70>)
 8000c1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c1e:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<13)){
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <DMA1_Channel4_IRQHandler+0x70>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d00a      	beq.n	8000c42 <DMA1_Channel4_IRQHandler+0x6a>
		if (PDMA_CallBacks[3].TransferComplete != 0)
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <DMA1_Channel4_IRQHandler+0x74>)
 8000c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <DMA1_Channel4_IRQHandler+0x62>
			PDMA_CallBacks[3].TransferComplete();
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <DMA1_Channel4_IRQHandler+0x74>)
 8000c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c38:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<13;
 8000c3a:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <DMA1_Channel4_IRQHandler+0x70>)
 8000c3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c40:	605a      	str	r2, [r3, #4]
	}
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	200000dc 	.word	0x200000dc

08000c50 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler (void){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	if(DMA1_REG->ISR & (1<<19)){
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <DMA1_Channel5_IRQHandler+0x70>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d00a      	beq.n	8000c76 <DMA1_Channel5_IRQHandler+0x26>
		if (PDMA_CallBacks[4].TransferError != 0)
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <DMA1_Channel5_IRQHandler+0x74>)
 8000c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d002      	beq.n	8000c6e <DMA1_Channel5_IRQHandler+0x1e>
			PDMA_CallBacks[4].TransferError();
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <DMA1_Channel5_IRQHandler+0x74>)
 8000c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c6c:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<19;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <DMA1_Channel5_IRQHandler+0x70>)
 8000c70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c74:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<18)){
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <DMA1_Channel5_IRQHandler+0x70>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d00a      	beq.n	8000c98 <DMA1_Channel5_IRQHandler+0x48>
		if (PDMA_CallBacks[4].HalfTransfer != 0)
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <DMA1_Channel5_IRQHandler+0x74>)
 8000c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d002      	beq.n	8000c90 <DMA1_Channel5_IRQHandler+0x40>
			PDMA_CallBacks[4].HalfTransfer();
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <DMA1_Channel5_IRQHandler+0x74>)
 8000c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8e:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<18;
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <DMA1_Channel5_IRQHandler+0x70>)
 8000c92:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c96:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<17)){
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <DMA1_Channel5_IRQHandler+0x70>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d00a      	beq.n	8000cba <DMA1_Channel5_IRQHandler+0x6a>
		if (PDMA_CallBacks[4].TransferComplete != 0)
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <DMA1_Channel5_IRQHandler+0x74>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <DMA1_Channel5_IRQHandler+0x62>
			PDMA_CallBacks[4].TransferComplete();
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <DMA1_Channel5_IRQHandler+0x74>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<17;
 8000cb2:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <DMA1_Channel5_IRQHandler+0x70>)
 8000cb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cb8:	605a      	str	r2, [r3, #4]
	}
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	200000dc 	.word	0x200000dc

08000cc8 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler (void){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	if(DMA1_REG->ISR & (1<<23)){
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <DMA1_Channel6_IRQHandler+0x70>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00a      	beq.n	8000cee <DMA1_Channel6_IRQHandler+0x26>
		if (PDMA_CallBacks[5].TransferError != 0)
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <DMA1_Channel6_IRQHandler+0x74>)
 8000cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d002      	beq.n	8000ce6 <DMA1_Channel6_IRQHandler+0x1e>
			PDMA_CallBacks[5].TransferError();
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <DMA1_Channel6_IRQHandler+0x74>)
 8000ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce4:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<23;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <DMA1_Channel6_IRQHandler+0x70>)
 8000ce8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000cec:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<22)){
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <DMA1_Channel6_IRQHandler+0x70>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00a      	beq.n	8000d10 <DMA1_Channel6_IRQHandler+0x48>
		if (PDMA_CallBacks[5].HalfTransfer != 0)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <DMA1_Channel6_IRQHandler+0x74>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d002      	beq.n	8000d08 <DMA1_Channel6_IRQHandler+0x40>
			PDMA_CallBacks[5].HalfTransfer();
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <DMA1_Channel6_IRQHandler+0x74>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<22;
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <DMA1_Channel6_IRQHandler+0x70>)
 8000d0a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d0e:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<21)){
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <DMA1_Channel6_IRQHandler+0x70>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d00a      	beq.n	8000d32 <DMA1_Channel6_IRQHandler+0x6a>
		if (PDMA_CallBacks[5].TransferComplete != 0)
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <DMA1_Channel6_IRQHandler+0x74>)
 8000d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <DMA1_Channel6_IRQHandler+0x62>
			PDMA_CallBacks[5].TransferComplete();
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <DMA1_Channel6_IRQHandler+0x74>)
 8000d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d28:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<21;
 8000d2a:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <DMA1_Channel6_IRQHandler+0x70>)
 8000d2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d30:	605a      	str	r2, [r3, #4]
	}
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	200000dc 	.word	0x200000dc

08000d40 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler (void){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	if(DMA1_REG->ISR & (1<<27)){
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <DMA1_Channel7_IRQHandler+0x70>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d00a      	beq.n	8000d66 <DMA1_Channel7_IRQHandler+0x26>
		if (PDMA_CallBacks[6].TransferError != 0)
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <DMA1_Channel7_IRQHandler+0x74>)
 8000d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d002      	beq.n	8000d5e <DMA1_Channel7_IRQHandler+0x1e>
			PDMA_CallBacks[6].TransferError();
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <DMA1_Channel7_IRQHandler+0x74>)
 8000d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d5c:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<27;
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <DMA1_Channel7_IRQHandler+0x70>)
 8000d60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d64:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<26)){
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <DMA1_Channel7_IRQHandler+0x70>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00a      	beq.n	8000d88 <DMA1_Channel7_IRQHandler+0x48>
		if (PDMA_CallBacks[6].HalfTransfer != 0)
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <DMA1_Channel7_IRQHandler+0x74>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d002      	beq.n	8000d80 <DMA1_Channel7_IRQHandler+0x40>
			PDMA_CallBacks[6].HalfTransfer();
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <DMA1_Channel7_IRQHandler+0x74>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<26;
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <DMA1_Channel7_IRQHandler+0x70>)
 8000d82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d86:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<25)){
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <DMA1_Channel7_IRQHandler+0x70>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d00a      	beq.n	8000daa <DMA1_Channel7_IRQHandler+0x6a>
		if (PDMA_CallBacks[6].TransferComplete != 0)
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <DMA1_Channel7_IRQHandler+0x74>)
 8000d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d002      	beq.n	8000da2 <DMA1_Channel7_IRQHandler+0x62>
			PDMA_CallBacks[6].TransferComplete();
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <DMA1_Channel7_IRQHandler+0x74>)
 8000d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000da0:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<25;
 8000da2:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <DMA1_Channel7_IRQHandler+0x70>)
 8000da4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000da8:	605a      	str	r2, [r3, #4]
	}
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40020000 	.word	0x40020000
 8000db4:	200000dc 	.word	0x200000dc

08000db8 <MI2C_voidInit>:
#include "1- LIB/BIT_MATH.h"

#include "I2C_interface.h"
#include "I2C_private.h"

void MI2C_voidInit(I2C_ID_t I2C_Instance, I2C_Mode_t I2C_Mode, u8 Copy_u8BusFrequency, u32 Copy_u32I2CFrequency){
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	71bb      	strb	r3, [r7, #6]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	717b      	strb	r3, [r7, #5]

	u16 Local_u16CCRBits = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	81fb      	strh	r3, [r7, #14]
	if (I2C_Instance > I2C_MAX_INSTANCE)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	f200 80f1 	bhi.w	8000fba <MI2C_voidInit+0x202>
		return;
	CLR_BIT(I2C_REGS[I2C_Instance]->CR1,0);
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	4a7c      	ldr	r2, [pc, #496]	; (8000fcc <MI2C_voidInit+0x214>)
 8000ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de0:	79fa      	ldrb	r2, [r7, #7]
 8000de2:	497a      	ldr	r1, [pc, #488]	; (8000fcc <MI2C_voidInit+0x214>)
 8000de4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	f022 0201 	bic.w	r2, r2, #1
 8000dee:	601a      	str	r2, [r3, #0]
	switch(I2C_Mode){
 8000df0:	79bb      	ldrb	r3, [r7, #6]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d011      	beq.n	8000e1a <MI2C_voidInit+0x62>
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d01c      	beq.n	8000e34 <MI2C_voidInit+0x7c>
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d000      	beq.n	8000e00 <MI2C_voidInit+0x48>
			I2C_REGS[I2C_Instance]->CR1 |= 0x5;
			break;
		case I2C_MODE_SMBUS_DEVICE:
			I2C_REGS[I2C_Instance]->CR1 |= 0x02;
		default:
			return;
 8000dfe:	e0e1      	b.n	8000fc4 <MI2C_voidInit+0x20c>
			I2C_REGS[I2C_Instance]->CR1 &= ~ (0x05);
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4a72      	ldr	r2, [pc, #456]	; (8000fcc <MI2C_voidInit+0x214>)
 8000e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e08:	79fa      	ldrb	r2, [r7, #7]
 8000e0a:	4970      	ldr	r1, [pc, #448]	; (8000fcc <MI2C_voidInit+0x214>)
 8000e0c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e10:	6812      	ldr	r2, [r2, #0]
 8000e12:	f022 0205 	bic.w	r2, r2, #5
 8000e16:	601a      	str	r2, [r3, #0]
			break;
 8000e18:	e019      	b.n	8000e4e <MI2C_voidInit+0x96>
			I2C_REGS[I2C_Instance]->CR1 |= 0x5;
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	4a6b      	ldr	r2, [pc, #428]	; (8000fcc <MI2C_voidInit+0x214>)
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	79fa      	ldrb	r2, [r7, #7]
 8000e24:	4969      	ldr	r1, [pc, #420]	; (8000fcc <MI2C_voidInit+0x214>)
 8000e26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e2a:	6812      	ldr	r2, [r2, #0]
 8000e2c:	f042 0205 	orr.w	r2, r2, #5
 8000e30:	601a      	str	r2, [r3, #0]
			break;
 8000e32:	e00c      	b.n	8000e4e <MI2C_voidInit+0x96>
			I2C_REGS[I2C_Instance]->CR1 |= 0x02;
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	4a65      	ldr	r2, [pc, #404]	; (8000fcc <MI2C_voidInit+0x214>)
 8000e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3c:	79fa      	ldrb	r2, [r7, #7]
 8000e3e:	4963      	ldr	r1, [pc, #396]	; (8000fcc <MI2C_voidInit+0x214>)
 8000e40:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e44:	6812      	ldr	r2, [r2, #0]
 8000e46:	f042 0202 	orr.w	r2, r2, #2
 8000e4a:	601a      	str	r2, [r3, #0]
			return;
 8000e4c:	e0ba      	b.n	8000fc4 <MI2C_voidInit+0x20c>
	}
	if (Copy_u8BusFrequency < 2 || Copy_u8BusFrequency > 50)
 8000e4e:	797b      	ldrb	r3, [r7, #5]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	f240 80b4 	bls.w	8000fbe <MI2C_voidInit+0x206>
 8000e56:	797b      	ldrb	r3, [r7, #5]
 8000e58:	2b32      	cmp	r3, #50	; 0x32
 8000e5a:	f200 80b0 	bhi.w	8000fbe <MI2C_voidInit+0x206>
		return;
	I2C_REGS[I2C_Instance]->CR2 = Copy_u8BusFrequency;
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	4a5a      	ldr	r2, [pc, #360]	; (8000fcc <MI2C_voidInit+0x214>)
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	797a      	ldrb	r2, [r7, #5]
 8000e68:	605a      	str	r2, [r3, #4]

	if (I2C_Mode != I2C_MODE_I2C || Copy_u32I2CFrequency <= 100000){
 8000e6a:	79bb      	ldrb	r3, [r7, #6]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d103      	bne.n	8000e78 <MI2C_voidInit+0xc0>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	4a57      	ldr	r2, [pc, #348]	; (8000fd0 <MI2C_voidInit+0x218>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d821      	bhi.n	8000ebc <MI2C_voidInit+0x104>
		//Standard Mode
		CLR_BIT(I2C_REGS[I2C_Instance]->CCR,15);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4a54      	ldr	r2, [pc, #336]	; (8000fcc <MI2C_voidInit+0x214>)
 8000e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e80:	79fa      	ldrb	r2, [r7, #7]
 8000e82:	4952      	ldr	r1, [pc, #328]	; (8000fcc <MI2C_voidInit+0x214>)
 8000e84:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e88:	69d2      	ldr	r2, [r2, #28]
 8000e8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e8e:	61da      	str	r2, [r3, #28]
		Local_u16CCRBits = (u16)((1000000UL * Copy_u8BusFrequency)/(2*Copy_u32I2CFrequency)) ;
 8000e90:	797b      	ldrb	r3, [r7, #5]
 8000e92:	4a50      	ldr	r2, [pc, #320]	; (8000fd4 <MI2C_voidInit+0x21c>)
 8000e94:	fb02 f203 	mul.w	r2, r2, r3
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea0:	81fb      	strh	r3, [r7, #14]
		if (Local_u16CCRBits < 4 )
 8000ea2:	89fb      	ldrh	r3, [r7, #14]
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d801      	bhi.n	8000eac <MI2C_voidInit+0xf4>
			Local_u16CCRBits = 4;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	81fb      	strh	r3, [r7, #14]
		I2C_REGS[I2C_Instance]->TRISE = Copy_u8BusFrequency+1;
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	4a47      	ldr	r2, [pc, #284]	; (8000fcc <MI2C_voidInit+0x214>)
 8000eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb4:	797a      	ldrb	r2, [r7, #5]
 8000eb6:	3201      	adds	r2, #1
 8000eb8:	621a      	str	r2, [r3, #32]
 8000eba:	e063      	b.n	8000f84 <MI2C_voidInit+0x1cc>
	}
	else{
		//Fast Mode
		SET_BIT(I2C_REGS[I2C_Instance]->CCR,15);
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	4a43      	ldr	r2, [pc, #268]	; (8000fcc <MI2C_voidInit+0x214>)
 8000ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec4:	79fa      	ldrb	r2, [r7, #7]
 8000ec6:	4941      	ldr	r1, [pc, #260]	; (8000fcc <MI2C_voidInit+0x214>)
 8000ec8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ecc:	69d2      	ldr	r2, [r2, #28]
 8000ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ed2:	61da      	str	r2, [r3, #28]
		if (Copy_u32I2CFrequency < 400000){
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	4a40      	ldr	r2, [pc, #256]	; (8000fd8 <MI2C_voidInit+0x220>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d81a      	bhi.n	8000f12 <MI2C_voidInit+0x15a>
			Local_u16CCRBits = (u16)((1000000UL * Copy_u8BusFrequency)/(3*Copy_u32I2CFrequency)) ;
 8000edc:	797b      	ldrb	r3, [r7, #5]
 8000ede:	4a3d      	ldr	r2, [pc, #244]	; (8000fd4 <MI2C_voidInit+0x21c>)
 8000ee0:	fb02 f103 	mul.w	r1, r2, r3
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ef0:	81fb      	strh	r3, [r7, #14]
			I2C_REGS[I2C_Instance]->TRISE = (u16)(Copy_u8BusFrequency * 3UL /10UL )+1;
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	4a35      	ldr	r2, [pc, #212]	; (8000fcc <MI2C_voidInit+0x214>)
 8000ef6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000efa:	797a      	ldrb	r2, [r7, #5]
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	4a36      	ldr	r2, [pc, #216]	; (8000fdc <MI2C_voidInit+0x224>)
 8000f04:	fba2 2303 	umull	r2, r3, r2, r3
 8000f08:	08db      	lsrs	r3, r3, #3
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	620b      	str	r3, [r1, #32]
 8000f10:	e038      	b.n	8000f84 <MI2C_voidInit+0x1cc>
		}

		else{
			if ((Copy_u32I2CFrequency == 400000 && (Copy_u8BusFrequency % 10 != 0)))
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	4a32      	ldr	r2, [pc, #200]	; (8000fe0 <MI2C_voidInit+0x228>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d10c      	bne.n	8000f34 <MI2C_voidInit+0x17c>
 8000f1a:	797a      	ldrb	r2, [r7, #5]
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <MI2C_voidInit+0x224>)
 8000f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8000f22:	08d9      	lsrs	r1, r3, #3
 8000f24:	460b      	mov	r3, r1
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d146      	bne.n	8000fc2 <MI2C_voidInit+0x20a>
				return;
			Local_u16CCRBits = (u16)((1000000UL * Copy_u8BusFrequency)/(25*Copy_u32I2CFrequency)) ;
 8000f34:	797b      	ldrb	r3, [r7, #5]
 8000f36:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <MI2C_voidInit+0x21c>)
 8000f38:	fb02 f103 	mul.w	r1, r2, r3
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	009a      	lsls	r2, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f4c:	81fb      	strh	r3, [r7, #14]
			I2C_REGS[I2C_Instance]->TRISE = (u16)(Copy_u8BusFrequency * 3UL /10UL )+1;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4a1e      	ldr	r2, [pc, #120]	; (8000fcc <MI2C_voidInit+0x214>)
 8000f52:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000f56:	797a      	ldrb	r2, [r7, #5]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <MI2C_voidInit+0x224>)
 8000f60:	fba2 2303 	umull	r2, r3, r2, r3
 8000f64:	08db      	lsrs	r3, r3, #3
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	3301      	adds	r3, #1
 8000f6a:	620b      	str	r3, [r1, #32]
			SET_BIT(I2C_REGS[I2C_Instance]->CCR,14);
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <MI2C_voidInit+0x214>)
 8000f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f74:	79fa      	ldrb	r2, [r7, #7]
 8000f76:	4915      	ldr	r1, [pc, #84]	; (8000fcc <MI2C_voidInit+0x214>)
 8000f78:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f7c:	69d2      	ldr	r2, [r2, #28]
 8000f7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f82:	61da      	str	r2, [r3, #28]
		}

	}
	I2C_REGS[I2C_Instance]->CCR |= ((u16)Local_u16CCRBits) & 0xfff;
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <MI2C_voidInit+0x214>)
 8000f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	490f      	ldr	r1, [pc, #60]	; (8000fcc <MI2C_voidInit+0x214>)
 8000f90:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f94:	69d1      	ldr	r1, [r2, #28]
 8000f96:	89fa      	ldrh	r2, [r7, #14]
 8000f98:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	61da      	str	r2, [r3, #28]


	SET_BIT(I2C_REGS[I2C_Instance]->CR1,0);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <MI2C_voidInit+0x214>)
 8000fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa8:	79fa      	ldrb	r2, [r7, #7]
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <MI2C_voidInit+0x214>)
 8000fac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fb0:	6812      	ldr	r2, [r2, #0]
 8000fb2:	f042 0201 	orr.w	r2, r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	e004      	b.n	8000fc4 <MI2C_voidInit+0x20c>
		return;
 8000fba:	bf00      	nop
 8000fbc:	e002      	b.n	8000fc4 <MI2C_voidInit+0x20c>
		return;
 8000fbe:	bf00      	nop
 8000fc0:	e000      	b.n	8000fc4 <MI2C_voidInit+0x20c>
				return;
 8000fc2:	bf00      	nop
}
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	20000030 	.word	0x20000030
 8000fd0:	000186a0 	.word	0x000186a0
 8000fd4:	000f4240 	.word	0x000f4240
 8000fd8:	00061a7f 	.word	0x00061a7f
 8000fdc:	cccccccd 	.word	0xcccccccd
 8000fe0:	00061a80 	.word	0x00061a80

08000fe4 <MI2C_enuConnect>:
void MI2C_voidSetOwnAddress(I2C_ID_t I2C_Instance, u16 Address){


}

I2C_Status_t MI2C_enuConnect(I2C_ID_t I2C_Instance, u16 SlaveAddress, I2C_Direction_t Direction){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	80bb      	strh	r3, [r7, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	71bb      	strb	r3, [r7, #6]

	u8 Local_u8DataReg = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73bb      	strb	r3, [r7, #14]
	I2C_Status_t Local_enuStatus =I2C_STATUS_OK;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	73fb      	strb	r3, [r7, #15]
	if (I2C_Instance > I2C_MAX_INSTANCE)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d901      	bls.n	8001008 <MI2C_enuConnect+0x24>
		Local_enuStatus = I2C_STATUS_INVALID_INSTANCE;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]

	//Check for Busy
	while(CHK_BIT(I2C_REGS[I2C_Instance]->SR1, 1));
 8001008:	bf00      	nop
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4a42      	ldr	r2, [pc, #264]	; (8001118 <MI2C_enuConnect+0x134>)
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f6      	bne.n	800100a <MI2C_enuConnect+0x26>

	//Address Mode
	if(SlaveAddress > 127)
 800101c:	88bb      	ldrh	r3, [r7, #4]
 800101e:	2b7f      	cmp	r3, #127	; 0x7f
 8001020:	d90b      	bls.n	800103a <MI2C_enuConnect+0x56>
		SET_BIT(I2C_REGS[I2C_Instance]->OAR1,15);
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4a3c      	ldr	r2, [pc, #240]	; (8001118 <MI2C_enuConnect+0x134>)
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	79fa      	ldrb	r2, [r7, #7]
 800102c:	493a      	ldr	r1, [pc, #232]	; (8001118 <MI2C_enuConnect+0x134>)
 800102e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001032:	6892      	ldr	r2, [r2, #8]
 8001034:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001038:	609a      	str	r2, [r3, #8]

	//Generate Start Bit
	CLR_BIT(I2C_REGS[I2C_Instance]->CR1,8);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4a36      	ldr	r2, [pc, #216]	; (8001118 <MI2C_enuConnect+0x134>)
 800103e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001042:	79fa      	ldrb	r2, [r7, #7]
 8001044:	4934      	ldr	r1, [pc, #208]	; (8001118 <MI2C_enuConnect+0x134>)
 8001046:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800104a:	6812      	ldr	r2, [r2, #0]
 800104c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001050:	601a      	str	r2, [r3, #0]
	SET_BIT(I2C_REGS[I2C_Instance]->CR1,8);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	4a30      	ldr	r2, [pc, #192]	; (8001118 <MI2C_enuConnect+0x134>)
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	79fa      	ldrb	r2, [r7, #7]
 800105c:	492e      	ldr	r1, [pc, #184]	; (8001118 <MI2C_enuConnect+0x134>)
 800105e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001062:	6812      	ldr	r2, [r2, #0]
 8001064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001068:	601a      	str	r2, [r3, #0]

	//Check for SB = 1, wait for start condition generation
	while(!CHK_BIT(I2C_REGS[I2C_Instance]->SR1,0));
 800106a:	bf00      	nop
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	4a2a      	ldr	r2, [pc, #168]	; (8001118 <MI2C_enuConnect+0x134>)
 8001070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f6      	beq.n	800106c <MI2C_enuConnect+0x88>

	//7-bit address or 10-bit address mode?
	if(CHK_BIT(I2C_REGS[I2C_Instance]->OAR1,15)){
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	4a25      	ldr	r2, [pc, #148]	; (8001118 <MI2C_enuConnect+0x134>)
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d026      	beq.n	80010de <MI2C_enuConnect+0xfa>
		//10-bit address Mode

		//Header with 2 most significant bits of the address and write command
		Local_u8DataReg = 0xF0 | ((SlaveAddress>>7) & 6) | Direction;
 8001090:	88bb      	ldrh	r3, [r7, #4]
 8001092:	09db      	lsrs	r3, r3, #7
 8001094:	b29b      	uxth	r3, r3
 8001096:	b25b      	sxtb	r3, r3
 8001098:	f003 0306 	and.w	r3, r3, #6
 800109c:	b25b      	sxtb	r3, r3
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	f063 030f 	orn	r3, r3, #15
 80010aa:	73bb      	strb	r3, [r7, #14]
		if(PI2C_voidWriteBAddressSynch(I2C_Instance,Local_u8DataReg) != 0){
 80010ac:	7bba      	ldrb	r2, [r7, #14]
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f934 	bl	8001320 <PI2C_voidWriteBAddressSynch>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <MI2C_enuConnect+0xe0>
			// Not Ack
			Local_enuStatus = I2C_STATUS_HEADER_NACK;
 80010be:	2301      	movs	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
 80010c2:	e01f      	b.n	8001104 <MI2C_enuConnect+0x120>
		}
		else{
			if(PI2C_voidWriteBAddressSynch(I2C_Instance,SlaveAddress & 0xFF) != 0){
 80010c4:	88bb      	ldrh	r3, [r7, #4]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f927 	bl	8001320 <PI2C_voidWriteBAddressSynch>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d015      	beq.n	8001104 <MI2C_enuConnect+0x120>
				// Not Ack
				Local_enuStatus = I2C_STATUS_ADDRESS_NACK;
 80010d8:	2302      	movs	r3, #2
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e012      	b.n	8001104 <MI2C_enuConnect+0x120>
			}
		}
	}
	else{
		//7-bit address Mode
		Local_u8DataReg = (SlaveAddress<<1) | Direction;
 80010de:	88bb      	ldrh	r3, [r7, #4]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	b25a      	sxtb	r2, r3
 80010e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	73bb      	strb	r3, [r7, #14]
		if(PI2C_voidWriteBAddressSynch(I2C_Instance,Local_u8DataReg) != 0){
 80010ee:	7bba      	ldrb	r2, [r7, #14]
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 f913 	bl	8001320 <PI2C_voidWriteBAddressSynch>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MI2C_enuConnect+0x120>
			// Not Ack
			Local_enuStatus = I2C_STATUS_ADDRESS_NACK;
 8001100:	2302      	movs	r3, #2
 8001102:	73fb      	strb	r3, [r7, #15]
		}
	}
	//dummy read of SR2
	(void)I2C_REGS[I2C_Instance]->SR2;
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <MI2C_enuConnect+0x134>)
 8001108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110c:	699b      	ldr	r3, [r3, #24]


	return Local_enuStatus;
 800110e:	7bfb      	ldrb	r3, [r7, #15]

}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000030 	.word	0x20000030

0800111c <MI2C_enuDisconnect>:

I2C_Status_t MI2C_enuDisconnect(I2C_ID_t I2C_Instance){
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	//Sends Stop Condition

	I2C_Status_t Local_enuStatus = I2C_STATUS_OK;
 8001126:	2304      	movs	r3, #4
 8001128:	73fb      	strb	r3, [r7, #15]

	//Clear ACK Bit
	CLR_BIT(I2C_REGS[I2C_Instance]->CR1,10);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <MI2C_enuDisconnect+0x90>)
 800112e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001132:	79fa      	ldrb	r2, [r7, #7]
 8001134:	491d      	ldr	r1, [pc, #116]	; (80011ac <MI2C_enuDisconnect+0x90>)
 8001136:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800113a:	6812      	ldr	r2, [r2, #0]
 800113c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001140:	601a      	str	r2, [r3, #0]
	//Generate Stop Condition
	SET_BIT(I2C_REGS[I2C_Instance]->CR1,9);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	4a19      	ldr	r2, [pc, #100]	; (80011ac <MI2C_enuDisconnect+0x90>)
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	79fa      	ldrb	r2, [r7, #7]
 800114c:	4917      	ldr	r1, [pc, #92]	; (80011ac <MI2C_enuDisconnect+0x90>)
 800114e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001152:	6812      	ldr	r2, [r2, #0]
 8001154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001158:	601a      	str	r2, [r3, #0]

	//wait for stop condition is generated
	while(CHK_BIT(I2C_REGS[I2C_Instance]->SR1, 1));
 800115a:	bf00      	nop
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	4a13      	ldr	r2, [pc, #76]	; (80011ac <MI2C_enuDisconnect+0x90>)
 8001160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f6      	bne.n	800115c <MI2C_enuDisconnect+0x40>

	if(CHK_BIT(I2C_REGS[I2C_Instance]->SR1,4)){
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <MI2C_enuDisconnect+0x90>)
 8001172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	f003 0310 	and.w	r3, r3, #16
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00c      	beq.n	800119a <MI2C_enuDisconnect+0x7e>
		I2C_REGS[I2C_Instance]->CR1 = I2C_REGS[I2C_Instance]->CR1;
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <MI2C_enuDisconnect+0x90>)
 8001184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001188:	79fa      	ldrb	r2, [r7, #7]
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <MI2C_enuDisconnect+0x90>)
 800118c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	601a      	str	r2, [r3, #0]
		Local_enuStatus = I2C_STATUS_OK;
 8001194:	2304      	movs	r3, #4
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	e001      	b.n	800119e <MI2C_enuDisconnect+0x82>
	}
	else{
		Local_enuStatus = I2C_STATUS_ERROR;
 800119a:	2305      	movs	r3, #5
 800119c:	73fb      	strb	r3, [r7, #15]
	}
	return Local_enuStatus;
 800119e:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000030 	.word	0x20000030

080011b0 <MI2C_enuWriteNoStopSynch>:

I2C_Status_t MI2C_enuWriteNoStopSynch(I2C_ID_t I2C_Instance, u8* DataBytes, u8 DataLength){
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	4613      	mov	r3, r2
 80011be:	71bb      	strb	r3, [r7, #6]

	I2C_Status_t Local_enuStatus = I2C_STATUS_OK;
 80011c0:	2304      	movs	r3, #4
 80011c2:	73fb      	strb	r3, [r7, #15]
		if (Local_enuStatus == I2C_STATUS_OK){
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d136      	bne.n	8001238 <MI2C_enuWriteNoStopSynch+0x88>
			while(0 < DataLength--){
 80011ca:	e030      	b.n	800122e <MI2C_enuWriteNoStopSynch+0x7e>
				//write data byte into DR
				I2C_REGS[I2C_Instance]->DR = *DataBytes++;
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <MI2C_enuWriteNoStopSynch+0x94>)
 80011d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	1c59      	adds	r1, r3, #1
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	6113      	str	r3, [r2, #16]

				//wait for Tx buffer empty
				while(!CHK_BIT(I2C_REGS[I2C_Instance]->SR1,7) && !(CHK_BIT(I2C_REGS[I2C_Instance]->SR1,2)) && !CHK_BIT(I2C_REGS[I2C_Instance]->SR1,10));
 80011de:	bf00      	nop
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	4a18      	ldr	r2, [pc, #96]	; (8001244 <MI2C_enuWriteNoStopSynch+0x94>)
 80011e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d111      	bne.n	8001216 <MI2C_enuWriteNoStopSynch+0x66>
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	4a13      	ldr	r2, [pc, #76]	; (8001244 <MI2C_enuWriteNoStopSynch+0x94>)
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d108      	bne.n	8001216 <MI2C_enuWriteNoStopSynch+0x66>
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <MI2C_enuWriteNoStopSynch+0x94>)
 8001208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0e4      	beq.n	80011e0 <MI2C_enuWriteNoStopSynch+0x30>

				if(CHK_BIT(I2C_REGS[I2C_Instance]->SR1,10)){
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <MI2C_enuWriteNoStopSynch+0x94>)
 800121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <MI2C_enuWriteNoStopSynch+0x7e>
					//Not Ack Received from Slave
					Local_enuStatus = I2C_STATUS_DATA_SENT_NACK;
 8001228:	2303      	movs	r3, #3
 800122a:	73fb      	strb	r3, [r7, #15]
					break;
 800122c:	e004      	b.n	8001238 <MI2C_enuWriteNoStopSynch+0x88>
			while(0 < DataLength--){
 800122e:	79bb      	ldrb	r3, [r7, #6]
 8001230:	1e5a      	subs	r2, r3, #1
 8001232:	71ba      	strb	r2, [r7, #6]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1c9      	bne.n	80011cc <MI2C_enuWriteNoStopSynch+0x1c>
				}
			}

		}
		return Local_enuStatus;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	20000030 	.word	0x20000030

08001248 <MI2C_enuReadNoStopSynch>:

I2C_Status_t MI2C_enuReadNoStopSynch(I2C_ID_t I2C_Instance, u8* DataBuffer, u8 DataLength){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	4613      	mov	r3, r2
 8001256:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8DataBufferIdx = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]
	I2C_Error_t Local_enuError = I2C_ERROR_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	73bb      	strb	r3, [r7, #14]
	I2C_Status_t Local_enuStatus = I2C_STATUS_OK;
 8001260:	2304      	movs	r3, #4
 8001262:	737b      	strb	r3, [r7, #13]
	SET_BIT(I2C_REGS[I2C_Instance]->CR1,10);
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	4a2d      	ldr	r2, [pc, #180]	; (800131c <MI2C_enuReadNoStopSynch+0xd4>)
 8001268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126c:	79fa      	ldrb	r2, [r7, #7]
 800126e:	492b      	ldr	r1, [pc, #172]	; (800131c <MI2C_enuReadNoStopSynch+0xd4>)
 8001270:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800127a:	601a      	str	r2, [r3, #0]
	if(Local_enuStatus == I2C_STATUS_OK){
 800127c:	7b7b      	ldrb	r3, [r7, #13]
 800127e:	2b04      	cmp	r3, #4
 8001280:	d142      	bne.n	8001308 <MI2C_enuReadNoStopSynch+0xc0>

		while(DataLength-- > 0){
 8001282:	e03c      	b.n	80012fe <MI2C_enuReadNoStopSynch+0xb6>
			if(DataLength == 0){
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10b      	bne.n	80012a2 <MI2C_enuReadNoStopSynch+0x5a>
				//Clear ACK Bit
				CLR_BIT(I2C_REGS[I2C_Instance]->CR1,10);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	4a23      	ldr	r2, [pc, #140]	; (800131c <MI2C_enuReadNoStopSynch+0xd4>)
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	79fa      	ldrb	r2, [r7, #7]
 8001294:	4921      	ldr	r1, [pc, #132]	; (800131c <MI2C_enuReadNoStopSynch+0xd4>)
 8001296:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012a0:	601a      	str	r2, [r3, #0]

			}
			//wait for receiving
			while(!CHK_BIT(I2C_REGS[I2C_Instance]->SR1,6) &&/*OVR*/ !CHK_BIT(I2C_REGS[I2C_Instance]->SR1,11) &&/*Timeout*/!CHK_BIT(I2C_REGS[I2C_Instance]->SR1,14));
 80012a2:	bf00      	nop
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	4a1d      	ldr	r2, [pc, #116]	; (800131c <MI2C_enuReadNoStopSynch+0xd4>)
 80012a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d111      	bne.n	80012da <MI2C_enuReadNoStopSynch+0x92>
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	4a18      	ldr	r2, [pc, #96]	; (800131c <MI2C_enuReadNoStopSynch+0xd4>)
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d108      	bne.n	80012da <MI2C_enuReadNoStopSynch+0x92>
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	4a14      	ldr	r2, [pc, #80]	; (800131c <MI2C_enuReadNoStopSynch+0xd4>)
 80012cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0e4      	beq.n	80012a4 <MI2C_enuReadNoStopSynch+0x5c>

			//Check for errors
			Local_enuError = PI2C_enuClearError(I2C1);
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 f866 	bl	80013ac <PI2C_enuClearError>
 80012e0:	4603      	mov	r3, r0
 80012e2:	73bb      	strb	r3, [r7, #14]

			//Read Data Byte after receiving
			DataBuffer[Local_u8DataBufferIdx++] = I2C_REGS[I2C_Instance]->DR;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	73fa      	strb	r2, [r7, #15]
 80012ea:	461a      	mov	r2, r3
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	79fa      	ldrb	r2, [r7, #7]
 80012f2:	490a      	ldr	r1, [pc, #40]	; (800131c <MI2C_enuReadNoStopSynch+0xd4>)
 80012f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012f8:	6912      	ldr	r2, [r2, #16]
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	701a      	strb	r2, [r3, #0]
		while(DataLength-- > 0){
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	1e5a      	subs	r2, r3, #1
 8001302:	71ba      	strb	r2, [r7, #6]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1bd      	bne.n	8001284 <MI2C_enuReadNoStopSynch+0x3c>
		}

	}

	if(Local_enuError != I2C_ERROR_OK)
 8001308:	7bbb      	ldrb	r3, [r7, #14]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MI2C_enuReadNoStopSynch+0xca>
		Local_enuStatus = I2C_STATUS_ERROR;
 800130e:	2305      	movs	r3, #5
 8001310:	737b      	strb	r3, [r7, #13]

	return Local_enuStatus;
 8001312:	7b7b      	ldrb	r3, [r7, #13]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000030 	.word	0x20000030

08001320 <PI2C_voidWriteBAddressSynch>:

	//return 0;

}

u8 PI2C_voidWriteBAddressSynch(I2C_ID_t I2C_Instance, u8 Copy_u8Address){
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	460a      	mov	r2, r1
 800132a:	71fb      	strb	r3, [r7, #7]
 800132c:	4613      	mov	r3, r2
 800132e:	71bb      	strb	r3, [r7, #6]

	//Address Transmission status
	u8 Status = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	73fb      	strb	r3, [r7, #15]

	//Write SlaveAddress to Data Register
	I2C_REGS[I2C_Instance]->DR = Copy_u8Address & 0xFF;
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <PI2C_voidWriteBAddressSynch+0x88>)
 8001338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133c:	79ba      	ldrb	r2, [r7, #6]
 800133e:	611a      	str	r2, [r3, #16]

	//Wait for Address Transmission
	while(!CHK_BIT(I2C_REGS[I2C_Instance]->SR1,1) && !CHK_BIT(I2C_REGS[I2C_Instance]->SR1,10));
 8001340:	bf00      	nop
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <PI2C_voidWriteBAddressSynch+0x88>)
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d108      	bne.n	8001366 <PI2C_voidWriteBAddressSynch+0x46>
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <PI2C_voidWriteBAddressSynch+0x88>)
 8001358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0ed      	beq.n	8001342 <PI2C_voidWriteBAddressSynch+0x22>

	if(CHK_BIT(I2C_REGS[I2C_Instance]->SR1,10)){
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4a0f      	ldr	r2, [pc, #60]	; (80013a8 <PI2C_voidWriteBAddressSynch+0x88>)
 800136a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00e      	beq.n	8001396 <PI2C_voidWriteBAddressSynch+0x76>
		//Not OK
		CLR_BIT(I2C_REGS[I2C_Instance]->SR1,10);
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <PI2C_voidWriteBAddressSynch+0x88>)
 800137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001380:	79fa      	ldrb	r2, [r7, #7]
 8001382:	4909      	ldr	r1, [pc, #36]	; (80013a8 <PI2C_voidWriteBAddressSynch+0x88>)
 8001384:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001388:	6952      	ldr	r2, [r2, #20]
 800138a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800138e:	615a      	str	r2, [r3, #20]
		Status = 1;
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e001      	b.n	800139a <PI2C_voidWriteBAddressSynch+0x7a>
	}
	else
	{
		//OK
		Status = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]
	}

	return Status;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000030 	.word	0x20000030

080013ac <PI2C_enuClearError>:

I2C_Error_t PI2C_enuClearError(I2C_ID_t Instance){
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]

	I2C_Error_t Local_enuState = I2C_ERROR_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]

	//Start Checking for Errors
	//Wrong Start Stop Condition
	if(CHK_BIT(I2C_REGS[Instance]->SR1,8)){
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4a47      	ldr	r2, [pc, #284]	; (80014dc <PI2C_enuClearError+0x130>)
 80013be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00d      	beq.n	80013e8 <PI2C_enuClearError+0x3c>
		Local_enuState = I2C_ERROR_WRONG_START_STOP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
		//Clear Error
		CLR_BIT(I2C_REGS[Instance]->SR1,8);
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	4a42      	ldr	r2, [pc, #264]	; (80014dc <PI2C_enuClearError+0x130>)
 80013d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d8:	79fa      	ldrb	r2, [r7, #7]
 80013da:	4940      	ldr	r1, [pc, #256]	; (80014dc <PI2C_enuClearError+0x130>)
 80013dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80013e0:	6952      	ldr	r2, [r2, #20]
 80013e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013e6:	615a      	str	r2, [r3, #20]
	}
	//Arbitration loss
	if(CHK_BIT(I2C_REGS[Instance]->SR1,9)){
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4a3c      	ldr	r2, [pc, #240]	; (80014dc <PI2C_enuClearError+0x130>)
 80013ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d012      	beq.n	8001420 <PI2C_enuClearError+0x74>
		Local_enuState = (Local_enuState == I2C_ERROR_OK)? I2C_ERROR_ARBITRATION_LOSS:I2C_ERROR_MULTIPLE;
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <PI2C_enuClearError+0x58>
 8001400:	2302      	movs	r3, #2
 8001402:	e000      	b.n	8001406 <PI2C_enuClearError+0x5a>
 8001404:	2306      	movs	r3, #6
 8001406:	73fb      	strb	r3, [r7, #15]
		//Clear Error
		CLR_BIT(I2C_REGS[Instance]->SR1,9);
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	4a34      	ldr	r2, [pc, #208]	; (80014dc <PI2C_enuClearError+0x130>)
 800140c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001410:	79fa      	ldrb	r2, [r7, #7]
 8001412:	4932      	ldr	r1, [pc, #200]	; (80014dc <PI2C_enuClearError+0x130>)
 8001414:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001418:	6952      	ldr	r2, [r2, #20]
 800141a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800141e:	615a      	str	r2, [r3, #20]
	}
	//Over Run
	if(CHK_BIT(I2C_REGS[Instance]->SR1,11)){
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4a2e      	ldr	r2, [pc, #184]	; (80014dc <PI2C_enuClearError+0x130>)
 8001424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800142e:	2b00      	cmp	r3, #0
 8001430:	d012      	beq.n	8001458 <PI2C_enuClearError+0xac>
		Local_enuState = (Local_enuState == I2C_ERROR_OK)? I2C_ERROR_OVERRUN:I2C_ERROR_MULTIPLE;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <PI2C_enuClearError+0x90>
 8001438:	2303      	movs	r3, #3
 800143a:	e000      	b.n	800143e <PI2C_enuClearError+0x92>
 800143c:	2306      	movs	r3, #6
 800143e:	73fb      	strb	r3, [r7, #15]
		//Clear Error
		CLR_BIT(I2C_REGS[Instance]->SR1,11);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	4a26      	ldr	r2, [pc, #152]	; (80014dc <PI2C_enuClearError+0x130>)
 8001444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001448:	79fa      	ldrb	r2, [r7, #7]
 800144a:	4924      	ldr	r1, [pc, #144]	; (80014dc <PI2C_enuClearError+0x130>)
 800144c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001450:	6952      	ldr	r2, [r2, #20]
 8001452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001456:	615a      	str	r2, [r3, #20]
	}
	//PEC
	if(CHK_BIT(I2C_REGS[Instance]->SR1,12)){
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	4a20      	ldr	r2, [pc, #128]	; (80014dc <PI2C_enuClearError+0x130>)
 800145c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d012      	beq.n	8001490 <PI2C_enuClearError+0xe4>
		Local_enuState = (Local_enuState == I2C_ERROR_OK)? I2C_ERROR_PEC:I2C_ERROR_MULTIPLE;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <PI2C_enuClearError+0xc8>
 8001470:	2304      	movs	r3, #4
 8001472:	e000      	b.n	8001476 <PI2C_enuClearError+0xca>
 8001474:	2306      	movs	r3, #6
 8001476:	73fb      	strb	r3, [r7, #15]
		//Clear Error
		CLR_BIT(I2C_REGS[Instance]->SR1,12);
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	4a18      	ldr	r2, [pc, #96]	; (80014dc <PI2C_enuClearError+0x130>)
 800147c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001480:	79fa      	ldrb	r2, [r7, #7]
 8001482:	4916      	ldr	r1, [pc, #88]	; (80014dc <PI2C_enuClearError+0x130>)
 8001484:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001488:	6952      	ldr	r2, [r2, #20]
 800148a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800148e:	615a      	str	r2, [r3, #20]
	}
	//Timeout
	if(CHK_BIT(I2C_REGS[Instance]->SR1,14)){
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <PI2C_enuClearError+0x130>)
 8001494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d012      	beq.n	80014c8 <PI2C_enuClearError+0x11c>
		Local_enuState = (Local_enuState == I2C_ERROR_OK)? I2C_ERROR_TIMEOUT:I2C_ERROR_MULTIPLE;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <PI2C_enuClearError+0x100>
 80014a8:	2305      	movs	r3, #5
 80014aa:	e000      	b.n	80014ae <PI2C_enuClearError+0x102>
 80014ac:	2306      	movs	r3, #6
 80014ae:	73fb      	strb	r3, [r7, #15]
		//Clear Error
		CLR_BIT(I2C_REGS[Instance]->SR1,14);
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <PI2C_enuClearError+0x130>)
 80014b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b8:	79fa      	ldrb	r2, [r7, #7]
 80014ba:	4908      	ldr	r1, [pc, #32]	; (80014dc <PI2C_enuClearError+0x130>)
 80014bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80014c0:	6952      	ldr	r2, [r2, #20]
 80014c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014c6:	615a      	str	r2, [r3, #20]
	}

	PI2C_enuErrors[Instance] = Local_enuState;
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4905      	ldr	r1, [pc, #20]	; (80014e0 <PI2C_enuClearError+0x134>)
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	54ca      	strb	r2, [r1, r3]

	return Local_enuState;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	20000030 	.word	0x20000030
 80014e0:	20000074 	.word	0x20000074

080014e4 <HRTC_voidInit>:
#include "ExRTC_interface.h"
#include "ExRTC_private.h"



void HRTC_voidInit(ERTC_Config_t* RTC){
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

	ERTCCalender_t ClockCalender, CompileCalender;
	ERTCTime_t ClockTime, CompileTime;

	MI2C_voidInit(RTC->I2C,I2C_MODE_I2C,MRCC_u32GetBusClock(RCC_BUS_APB1)/1000000,50000);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	781c      	ldrb	r4, [r3, #0]
 80014f0:	2001      	movs	r0, #1
 80014f2:	f7fe ff7f 	bl	80003f4 <MRCC_u32GetBusClock>
 80014f6:	4602      	mov	r2, r0
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HRTC_voidInit+0x7c>)
 80014fa:	fba3 2302 	umull	r2, r3, r3, r2
 80014fe:	0c9b      	lsrs	r3, r3, #18
 8001500:	b2da      	uxtb	r2, r3
 8001502:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001506:	2100      	movs	r1, #0
 8001508:	4620      	mov	r0, r4
 800150a:	f7ff fc55 	bl	8000db8 <MI2C_voidInit>

	HRTC_voidGetDateTime(RTC,&ClockCalender, &ClockTime);
 800150e:	f107 020c 	add.w	r2, r7, #12
 8001512:	f107 0318 	add.w	r3, r7, #24
 8001516:	4619      	mov	r1, r3
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f827 	bl	800156c <HRTC_voidGetDateTime>

	HRTC_voidStringtoDateTime(__DATE__,__TIME__,&CompileCalender,&CompileTime);
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	f107 0210 	add.w	r2, r7, #16
 8001526:	490f      	ldr	r1, [pc, #60]	; (8001564 <HRTC_voidInit+0x80>)
 8001528:	480f      	ldr	r0, [pc, #60]	; (8001568 <HRTC_voidInit+0x84>)
 800152a:	f000 f891 	bl	8001650 <HRTC_voidStringtoDateTime>

	if(PERTC_s8CompareTime(&CompileCalender,&CompileTime,&ClockCalender,&ClockTime) == 1)
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	f107 0218 	add.w	r2, r7, #24
 8001536:	f107 0108 	add.w	r1, r7, #8
 800153a:	f107 0010 	add.w	r0, r7, #16
 800153e:	f000 f953 	bl	80017e8 <PERTC_s8CompareTime>
 8001542:	4603      	mov	r3, r0
 8001544:	2b01      	cmp	r3, #1
 8001546:	d107      	bne.n	8001558 <HRTC_voidInit+0x74>
		HRTC_voidSetDateTime(RTC,&CompileCalender,&CompileTime);
 8001548:	f107 0208 	add.w	r2, r7, #8
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4619      	mov	r1, r3
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f84c 	bl	80015f0 <HRTC_voidSetDateTime>
}
 8001558:	bf00      	nop
 800155a:	3724      	adds	r7, #36	; 0x24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd90      	pop	{r4, r7, pc}
 8001560:	431bde83 	.word	0x431bde83
 8001564:	08001ef4 	.word	0x08001ef4
 8001568:	08001f00 	.word	0x08001f00

0800156c <HRTC_voidGetDateTime>:


void HRTC_voidGetDateTime(ERTC_Config_t* RTC, ERTCCalender_t* Calender, ERTCTime_t* Time){
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]

	I2C_Status_t Status = I2C_STATUS_OK;
 8001578:	2304      	movs	r3, #4
 800157a:	77fb      	strb	r3, [r7, #31]
	u8 Local_u8Buffer[8];
	Local_u8Buffer[0] = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	753b      	strb	r3, [r7, #20]
	Status = MI2C_enuConnect(RTC->I2C,EXTERNAL_RTC_I2C_ADDRESS,I2C_DIRECTION_WRITE);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2200      	movs	r2, #0
 8001586:	2168      	movs	r1, #104	; 0x68
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fd2b 	bl	8000fe4 <MI2C_enuConnect>
 800158e:	4603      	mov	r3, r0
 8001590:	77fb      	strb	r3, [r7, #31]
	Status = MI2C_enuWriteNoStopSynch(RTC->I2C,Local_u8Buffer,1);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	f107 0114 	add.w	r1, r7, #20
 800159a:	2201      	movs	r2, #1
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fe07 	bl	80011b0 <MI2C_enuWriteNoStopSynch>
 80015a2:	4603      	mov	r3, r0
 80015a4:	77fb      	strb	r3, [r7, #31]
	Status = MI2C_enuConnect(RTC->I2C,EXTERNAL_RTC_I2C_ADDRESS,I2C_DIRECTION_READ);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2201      	movs	r2, #1
 80015ac:	2168      	movs	r1, #104	; 0x68
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fd18 	bl	8000fe4 <MI2C_enuConnect>
 80015b4:	4603      	mov	r3, r0
 80015b6:	77fb      	strb	r3, [r7, #31]
	Status = MI2C_enuReadNoStopSynch(RTC->I2C,Local_u8Buffer,7);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	f107 0114 	add.w	r1, r7, #20
 80015c0:	2207      	movs	r2, #7
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fe40 	bl	8001248 <MI2C_enuReadNoStopSynch>
 80015c8:	4603      	mov	r3, r0
 80015ca:	77fb      	strb	r3, [r7, #31]
	Status = MI2C_enuDisconnect(RTC->I2C);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fda3 	bl	800111c <MI2C_enuDisconnect>
 80015d6:	4603      	mov	r3, r0
 80015d8:	77fb      	strb	r3, [r7, #31]


	PERTC_voidRegistersToDateTime(Local_u8Buffer, Calender, Time);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f97a 	bl	80018dc <PERTC_voidRegistersToDateTime>
	(void)Status;
}
 80015e8:	bf00      	nop
 80015ea:	3720      	adds	r7, #32
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HRTC_voidSetDateTime>:

void HRTC_voidSetDateTime(ERTC_Config_t* RTC, ERTCCalender_t* Calender, ERTCTime_t* Time){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]

	u8 Local_u8Buffer[8];
	I2C_Status_t Status = I2C_STATUS_OK;
 80015fc:	2304      	movs	r3, #4
 80015fe:	77fb      	strb	r3, [r7, #31]
	//Write time to Clock
	Local_u8Buffer[0] = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	753b      	strb	r3, [r7, #20]
	PERTC_voidDateTimeToRegisters(Local_u8Buffer+1,Calender,Time);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	3301      	adds	r3, #1
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fa02 	bl	8001a18 <PERTC_voidDateTimeToRegisters>
	Status = MI2C_enuConnect(RTC->I2C,EXTERNAL_RTC_I2C_ADDRESS,I2C_DIRECTION_WRITE);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2200      	movs	r2, #0
 800161a:	2168      	movs	r1, #104	; 0x68
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fce1 	bl	8000fe4 <MI2C_enuConnect>
 8001622:	4603      	mov	r3, r0
 8001624:	77fb      	strb	r3, [r7, #31]
	Status = MI2C_enuWriteNoStopSynch(RTC->I2C,Local_u8Buffer,8);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	f107 0114 	add.w	r1, r7, #20
 800162e:	2208      	movs	r2, #8
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fdbd 	bl	80011b0 <MI2C_enuWriteNoStopSynch>
 8001636:	4603      	mov	r3, r0
 8001638:	77fb      	strb	r3, [r7, #31]
	Status = MI2C_enuDisconnect(RTC->I2C);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fd6c 	bl	800111c <MI2C_enuDisconnect>
 8001644:	4603      	mov	r3, r0
 8001646:	77fb      	strb	r3, [r7, #31]
	(void)Status;
}
 8001648:	bf00      	nop
 800164a:	3720      	adds	r7, #32
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HRTC_voidStringtoDateTime>:

void HRTC_voidStringtoDateTime(char* DateString, char* TimeString, ERTCCalender_t* Calender, ERTCTime_t* Time){
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	603b      	str	r3, [r7, #0]
	switch(*DateString){
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	3b41      	subs	r3, #65	; 0x41
 8001664:	2b12      	cmp	r3, #18
 8001666:	d868      	bhi.n	800173a <HRTC_voidStringtoDateTime+0xea>
 8001668:	a201      	add	r2, pc, #4	; (adr r2, 8001670 <HRTC_voidStringtoDateTime+0x20>)
 800166a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166e:	bf00      	nop
 8001670:	08001705 	.word	0x08001705
 8001674:	0800173b 	.word	0x0800173b
 8001678:	0800173b 	.word	0x0800173b
 800167c:	08001733 	.word	0x08001733
 8001680:	0800173b 	.word	0x0800173b
 8001684:	080016e9 	.word	0x080016e9
 8001688:	0800173b 	.word	0x0800173b
 800168c:	0800173b 	.word	0x0800173b
 8001690:	0800173b 	.word	0x0800173b
 8001694:	080016bd 	.word	0x080016bd
 8001698:	0800173b 	.word	0x0800173b
 800169c:	0800173b 	.word	0x0800173b
 80016a0:	080016f1 	.word	0x080016f1
 80016a4:	0800172b 	.word	0x0800172b
 80016a8:	08001723 	.word	0x08001723
 80016ac:	0800173b 	.word	0x0800173b
 80016b0:	0800173b 	.word	0x0800173b
 80016b4:	0800173b 	.word	0x0800173b
 80016b8:	0800171b 	.word	0x0800171b
		case 'J':
			if(*(DateString+1) == 'a'){
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3301      	adds	r3, #1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b61      	cmp	r3, #97	; 0x61
 80016c4:	d103      	bne.n	80016ce <HRTC_voidStringtoDateTime+0x7e>
				//Jan
				Calender->Month = 1;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	709a      	strb	r2, [r3, #2]
			}
			else{
				//July
				Calender->Month = 7;
			}
			break;
 80016cc:	e036      	b.n	800173c <HRTC_voidStringtoDateTime+0xec>
			else if(*(DateString+2) == 'n'){
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3302      	adds	r3, #2
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b6e      	cmp	r3, #110	; 0x6e
 80016d6:	d103      	bne.n	80016e0 <HRTC_voidStringtoDateTime+0x90>
				Calender->Month = 6;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2206      	movs	r2, #6
 80016dc:	709a      	strb	r2, [r3, #2]
			break;
 80016de:	e02d      	b.n	800173c <HRTC_voidStringtoDateTime+0xec>
				Calender->Month = 7;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2207      	movs	r2, #7
 80016e4:	709a      	strb	r2, [r3, #2]
			break;
 80016e6:	e029      	b.n	800173c <HRTC_voidStringtoDateTime+0xec>
		case 'F':
			//Feb
			Calender->Month = 2;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2202      	movs	r2, #2
 80016ec:	709a      	strb	r2, [r3, #2]
			break;
 80016ee:	e025      	b.n	800173c <HRTC_voidStringtoDateTime+0xec>
		case 'M':
			//Mar => 3, May => 5
			Calender->Month = ((*DateString+2) == 'r')?	3:5;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b70      	cmp	r3, #112	; 0x70
 80016f6:	d101      	bne.n	80016fc <HRTC_voidStringtoDateTime+0xac>
 80016f8:	2203      	movs	r2, #3
 80016fa:	e000      	b.n	80016fe <HRTC_voidStringtoDateTime+0xae>
 80016fc:	2205      	movs	r2, #5
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	709a      	strb	r2, [r3, #2]
			break;
 8001702:	e01b      	b.n	800173c <HRTC_voidStringtoDateTime+0xec>
		case 'A':
			//Apr => 4, Aug => 8
			Calender->Month = (*(DateString+1) == 'p')? 4:8;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3301      	adds	r3, #1
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b70      	cmp	r3, #112	; 0x70
 800170c:	d101      	bne.n	8001712 <HRTC_voidStringtoDateTime+0xc2>
 800170e:	2204      	movs	r2, #4
 8001710:	e000      	b.n	8001714 <HRTC_voidStringtoDateTime+0xc4>
 8001712:	2208      	movs	r2, #8
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	709a      	strb	r2, [r3, #2]
			break;
 8001718:	e010      	b.n	800173c <HRTC_voidStringtoDateTime+0xec>
		case 'S':
			//Sep
			Calender->Month = 9;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2209      	movs	r2, #9
 800171e:	709a      	strb	r2, [r3, #2]
			break;
 8001720:	e00c      	b.n	800173c <HRTC_voidStringtoDateTime+0xec>
		case 'O':
			//Oct
			Calender->Month = 10;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	220a      	movs	r2, #10
 8001726:	709a      	strb	r2, [r3, #2]
			break;
 8001728:	e008      	b.n	800173c <HRTC_voidStringtoDateTime+0xec>
		case 'N':
			//Nov
			Calender->Month = 11;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	220b      	movs	r2, #11
 800172e:	709a      	strb	r2, [r3, #2]
			break;
 8001730:	e004      	b.n	800173c <HRTC_voidStringtoDateTime+0xec>
		case 'D':
			//Dec
			Calender->Month = 12;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	220c      	movs	r2, #12
 8001736:	709a      	strb	r2, [r3, #2]
			break;
 8001738:	e000      	b.n	800173c <HRTC_voidStringtoDateTime+0xec>
		default:
			break;
 800173a:	bf00      	nop
	}
	Calender->Date = LSTRING_s32ToInt(DateString+4,' ');
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3304      	adds	r3, #4
 8001740:	2120      	movs	r1, #32
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fd02 	bl	800014c <LSTRING_s32ToInt>
 8001748:	4603      	mov	r3, r0
 800174a:	b2da      	uxtb	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	70da      	strb	r2, [r3, #3]
	Calender->Year = LSTRING_s32ToInt(DateString+7,' ');
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3307      	adds	r3, #7
 8001754:	2120      	movs	r1, #32
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fcf8 	bl	800014c <LSTRING_s32ToInt>
 800175c:	4603      	mov	r3, r0
 800175e:	b29a      	uxth	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	801a      	strh	r2, [r3, #0]

	Time->Hour = LSTRING_s32ToInt(TimeString,':');
 8001764:	213a      	movs	r1, #58	; 0x3a
 8001766:	68b8      	ldr	r0, [r7, #8]
 8001768:	f7fe fcf0 	bl	800014c <LSTRING_s32ToInt>
 800176c:	4603      	mov	r3, r0
 800176e:	b2da      	uxtb	r2, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	701a      	strb	r2, [r3, #0]
	Time->Minute = LSTRING_s32ToInt(TimeString + 3,':');
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	3303      	adds	r3, #3
 8001778:	213a      	movs	r1, #58	; 0x3a
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fce6 	bl	800014c <LSTRING_s32ToInt>
 8001780:	4603      	mov	r3, r0
 8001782:	b2da      	uxtb	r2, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	705a      	strb	r2, [r3, #1]
	Time->Second = LSTRING_s32ToInt(TimeString + 6,':');
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	3306      	adds	r3, #6
 800178c:	213a      	movs	r1, #58	; 0x3a
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fcdc 	bl	800014c <LSTRING_s32ToInt>
 8001794:	4603      	mov	r3, r0
 8001796:	b2da      	uxtb	r2, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	709a      	strb	r2, [r3, #2]
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HRTC_voidSetOutputMode>:


void HRTC_voidSetOutputMode(ERTC_Config_t* RTC, ERTC_OutputMode_t OutputMode){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]

	u8 Local_u8Buffer[2] = {0x7,OutputMode};
 80017b0:	2307      	movs	r3, #7
 80017b2:	733b      	strb	r3, [r7, #12]
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	737b      	strb	r3, [r7, #13]

	MI2C_enuConnect(RTC->I2C,EXTERNAL_RTC_I2C_ADDRESS, I2C_DIRECTION_WRITE);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	2168      	movs	r1, #104	; 0x68
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fc0f 	bl	8000fe4 <MI2C_enuConnect>
	MI2C_enuWriteNoStopSynch(RTC->I2C,Local_u8Buffer,2);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	f107 010c 	add.w	r1, r7, #12
 80017ce:	2202      	movs	r2, #2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fced 	bl	80011b0 <MI2C_enuWriteNoStopSynch>
	MI2C_enuDisconnect(RTC->I2C);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fc9e 	bl	800111c <MI2C_enuDisconnect>
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <PERTC_s8CompareTime>:





s8 PERTC_s8CompareTime(ERTCCalender_t* CalenderA ,ERTCTime_t* TimeA, ERTCCalender_t* CalenderB ,ERTCTime_t* TimeB){
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]
	s8 Local_s8Comparison = 0;	//Both Equal
 80017f6:	2300      	movs	r3, #0
 80017f8:	75fb      	strb	r3, [r7, #23]
	if(CalenderA->Year > CalenderB->Year)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	881a      	ldrh	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d902      	bls.n	800180c <PERTC_s8CompareTime+0x24>
		Local_s8Comparison = 1;
 8001806:	2301      	movs	r3, #1
 8001808:	75fb      	strb	r3, [r7, #23]
 800180a:	e061      	b.n	80018d0 <PERTC_s8CompareTime+0xe8>
	else if (CalenderA->Year < CalenderB->Year)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	881a      	ldrh	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d202      	bcs.n	800181e <PERTC_s8CompareTime+0x36>
		Local_s8Comparison = -1;
 8001818:	23ff      	movs	r3, #255	; 0xff
 800181a:	75fb      	strb	r3, [r7, #23]
 800181c:	e058      	b.n	80018d0 <PERTC_s8CompareTime+0xe8>
	else if (CalenderA->Month > CalenderB->Month)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	789a      	ldrb	r2, [r3, #2]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	789b      	ldrb	r3, [r3, #2]
 8001826:	429a      	cmp	r2, r3
 8001828:	d902      	bls.n	8001830 <PERTC_s8CompareTime+0x48>
		Local_s8Comparison = 1;
 800182a:	2301      	movs	r3, #1
 800182c:	75fb      	strb	r3, [r7, #23]
 800182e:	e04f      	b.n	80018d0 <PERTC_s8CompareTime+0xe8>
	else if (CalenderA->Month < CalenderB->Month)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	789a      	ldrb	r2, [r3, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	789b      	ldrb	r3, [r3, #2]
 8001838:	429a      	cmp	r2, r3
 800183a:	d202      	bcs.n	8001842 <PERTC_s8CompareTime+0x5a>
		Local_s8Comparison = -1;
 800183c:	23ff      	movs	r3, #255	; 0xff
 800183e:	75fb      	strb	r3, [r7, #23]
 8001840:	e046      	b.n	80018d0 <PERTC_s8CompareTime+0xe8>
	else if (CalenderA->Date > CalenderB->Date)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	78da      	ldrb	r2, [r3, #3]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	78db      	ldrb	r3, [r3, #3]
 800184a:	429a      	cmp	r2, r3
 800184c:	d902      	bls.n	8001854 <PERTC_s8CompareTime+0x6c>
		Local_s8Comparison = 1;
 800184e:	2301      	movs	r3, #1
 8001850:	75fb      	strb	r3, [r7, #23]
 8001852:	e03d      	b.n	80018d0 <PERTC_s8CompareTime+0xe8>
	else if (CalenderA->Date < CalenderB->Date)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	78da      	ldrb	r2, [r3, #3]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	78db      	ldrb	r3, [r3, #3]
 800185c:	429a      	cmp	r2, r3
 800185e:	d202      	bcs.n	8001866 <PERTC_s8CompareTime+0x7e>
		Local_s8Comparison = -1;
 8001860:	23ff      	movs	r3, #255	; 0xff
 8001862:	75fb      	strb	r3, [r7, #23]
 8001864:	e034      	b.n	80018d0 <PERTC_s8CompareTime+0xe8>
	else if (TimeA->Hour > TimeB->Hour)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d902      	bls.n	8001878 <PERTC_s8CompareTime+0x90>
		Local_s8Comparison = 1;
 8001872:	2301      	movs	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]
 8001876:	e02b      	b.n	80018d0 <PERTC_s8CompareTime+0xe8>
	else if (TimeA->Hour < TimeB->Hour)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d202      	bcs.n	800188a <PERTC_s8CompareTime+0xa2>
		Local_s8Comparison = -1;
 8001884:	23ff      	movs	r3, #255	; 0xff
 8001886:	75fb      	strb	r3, [r7, #23]
 8001888:	e022      	b.n	80018d0 <PERTC_s8CompareTime+0xe8>
	else if (TimeA->Minute > TimeB->Minute)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	785a      	ldrb	r2, [r3, #1]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	785b      	ldrb	r3, [r3, #1]
 8001892:	429a      	cmp	r2, r3
 8001894:	d902      	bls.n	800189c <PERTC_s8CompareTime+0xb4>
		Local_s8Comparison = 1;
 8001896:	2301      	movs	r3, #1
 8001898:	75fb      	strb	r3, [r7, #23]
 800189a:	e019      	b.n	80018d0 <PERTC_s8CompareTime+0xe8>
	else if (TimeA->Minute < TimeB->Minute)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	785a      	ldrb	r2, [r3, #1]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	785b      	ldrb	r3, [r3, #1]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d202      	bcs.n	80018ae <PERTC_s8CompareTime+0xc6>
		Local_s8Comparison = -1;
 80018a8:	23ff      	movs	r3, #255	; 0xff
 80018aa:	75fb      	strb	r3, [r7, #23]
 80018ac:	e010      	b.n	80018d0 <PERTC_s8CompareTime+0xe8>
	else if (TimeA->Second > TimeB->Second)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	789a      	ldrb	r2, [r3, #2]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	789b      	ldrb	r3, [r3, #2]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d902      	bls.n	80018c0 <PERTC_s8CompareTime+0xd8>
		Local_s8Comparison = 1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	75fb      	strb	r3, [r7, #23]
 80018be:	e007      	b.n	80018d0 <PERTC_s8CompareTime+0xe8>
	else if (TimeA->Second < TimeB->Second)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	789a      	ldrb	r2, [r3, #2]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	789b      	ldrb	r3, [r3, #2]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d201      	bcs.n	80018d0 <PERTC_s8CompareTime+0xe8>
		Local_s8Comparison = -1;
 80018cc:	23ff      	movs	r3, #255	; 0xff
 80018ce:	75fb      	strb	r3, [r7, #23]
	return Local_s8Comparison;
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	371c      	adds	r7, #28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <PERTC_voidRegistersToDateTime>:

void PERTC_voidRegistersToDateTime(u8 Registers[7], ERTCCalender_t* Calender, ERTCTime_t* Time){
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]

	Time->Second = (Registers[0] & 0xF) + ((Registers[0] & 0x70)>>4)*10;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	f003 030f 	and.w	r3, r3, #15
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	111b      	asrs	r3, r3, #4
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	4619      	mov	r1, r3
 8001902:	0089      	lsls	r1, r1, #2
 8001904:	440b      	add	r3, r1
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	b2db      	uxtb	r3, r3
 800190a:	4413      	add	r3, r2
 800190c:	b2da      	uxtb	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	709a      	strb	r2, [r3, #2]
	Time->Minute = (Registers[1] & 0xF) + ((Registers[1] & 0x70)>>4)*10;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3301      	adds	r3, #1
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	b2da      	uxtb	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	111b      	asrs	r3, r3, #4
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4619      	mov	r1, r3
 8001930:	0089      	lsls	r1, r1, #2
 8001932:	440b      	add	r3, r1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	b2db      	uxtb	r3, r3
 8001938:	4413      	add	r3, r2
 800193a:	b2da      	uxtb	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	705a      	strb	r2, [r3, #1]
	Time->Hour =  (Registers[2] & 0xF) + ((Registers[2] & 0x30)>>4)*10;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3302      	adds	r3, #2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	b2da      	uxtb	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3302      	adds	r3, #2
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	111b      	asrs	r3, r3, #4
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	4619      	mov	r1, r3
 800195e:	0089      	lsls	r1, r1, #2
 8001960:	440b      	add	r3, r1
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	b2db      	uxtb	r3, r3
 8001966:	4413      	add	r3, r2
 8001968:	b2da      	uxtb	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	701a      	strb	r2, [r3, #0]

	Calender->Day = Registers[3] & 0x7;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3303      	adds	r3, #3
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	b2da      	uxtb	r2, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	711a      	strb	r2, [r3, #4]
	Calender->Date = (Registers[4] & 0xF) + ((Registers[4] & 0x30)>>4)*10;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3304      	adds	r3, #4
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	b2da      	uxtb	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	3304      	adds	r3, #4
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	111b      	asrs	r3, r3, #4
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	4619      	mov	r1, r3
 800199c:	0089      	lsls	r1, r1, #2
 800199e:	440b      	add	r3, r1
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	70da      	strb	r2, [r3, #3]
	Calender->Month = (Registers[5] & 0xF) + ((Registers[5] & 0x10)>>4)*10;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3305      	adds	r3, #5
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3305      	adds	r3, #5
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	111b      	asrs	r3, r3, #4
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	4619      	mov	r1, r3
 80019ca:	0089      	lsls	r1, r1, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	709a      	strb	r2, [r3, #2]
	Calender->Year = (Registers[6] & 0xF) + ((Registers[6] & 0xF0)>>4)*10  + 2000;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3306      	adds	r3, #6
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3306      	adds	r3, #6
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	4619      	mov	r1, r3
 80019f6:	0089      	lsls	r1, r1, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	801a      	strh	r2, [r3, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
	...

08001a18 <PERTC_voidDateTimeToRegisters>:

void PERTC_voidDateTimeToRegisters(u8 Registers[7], ERTCCalender_t* Calender, ERTCTime_t* Time){
 8001a18:	b490      	push	{r4, r7}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]

	Registers[0] = ((Time->Second/10) << 4 ) | (Time->Second%10);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	789b      	ldrb	r3, [r3, #2]
 8001a28:	4a69      	ldr	r2, [pc, #420]	; (8001bd0 <PERTC_voidDateTimeToRegisters+0x1b8>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	08db      	lsrs	r3, r3, #3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	b258      	sxtb	r0, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	789a      	ldrb	r2, [r3, #2]
 8001a3a:	4b65      	ldr	r3, [pc, #404]	; (8001bd0 <PERTC_voidDateTimeToRegisters+0x1b8>)
 8001a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a40:	08d9      	lsrs	r1, r3, #3
 8001a42:	460b      	mov	r3, r1
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	b25b      	sxtb	r3, r3
 8001a50:	4303      	orrs	r3, r0
 8001a52:	b25b      	sxtb	r3, r3
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	701a      	strb	r2, [r3, #0]
	Registers[1] = ((Time->Minute/10) << 4 ) | (Time->Minute%10);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1c58      	adds	r0, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	785b      	ldrb	r3, [r3, #1]
 8001a62:	4a5b      	ldr	r2, [pc, #364]	; (8001bd0 <PERTC_voidDateTimeToRegisters+0x1b8>)
 8001a64:	fba2 2303 	umull	r2, r3, r2, r3
 8001a68:	08db      	lsrs	r3, r3, #3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	b25c      	sxtb	r4, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	785a      	ldrb	r2, [r3, #1]
 8001a74:	4b56      	ldr	r3, [pc, #344]	; (8001bd0 <PERTC_voidDateTimeToRegisters+0x1b8>)
 8001a76:	fba3 1302 	umull	r1, r3, r3, r2
 8001a7a:	08d9      	lsrs	r1, r3, #3
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	b25b      	sxtb	r3, r3
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	b25b      	sxtb	r3, r3
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	7003      	strb	r3, [r0, #0]
	Registers[2] = ((Time->Hour/10) << 4 ) | (Time->Hour%10);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1c98      	adds	r0, r3, #2
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	4a4d      	ldr	r2, [pc, #308]	; (8001bd0 <PERTC_voidDateTimeToRegisters+0x1b8>)
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	08db      	lsrs	r3, r3, #3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	b25c      	sxtb	r4, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	4b48      	ldr	r3, [pc, #288]	; (8001bd0 <PERTC_voidDateTimeToRegisters+0x1b8>)
 8001aae:	fba3 1302 	umull	r1, r3, r3, r2
 8001ab2:	08d9      	lsrs	r1, r3, #3
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	4323      	orrs	r3, r4
 8001ac4:	b25b      	sxtb	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	7003      	strb	r3, [r0, #0]

	Registers[3] = 0;//((Calender->Day));
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3303      	adds	r3, #3
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
	Registers[4] = ((Calender->Date/10) << 4) | (Calender->Date % 10);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1d18      	adds	r0, r3, #4
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	78db      	ldrb	r3, [r3, #3]
 8001ada:	4a3d      	ldr	r2, [pc, #244]	; (8001bd0 <PERTC_voidDateTimeToRegisters+0x1b8>)
 8001adc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae0:	08db      	lsrs	r3, r3, #3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	b25c      	sxtb	r4, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	78da      	ldrb	r2, [r3, #3]
 8001aec:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <PERTC_voidDateTimeToRegisters+0x1b8>)
 8001aee:	fba3 1302 	umull	r1, r3, r3, r2
 8001af2:	08d9      	lsrs	r1, r3, #3
 8001af4:	460b      	mov	r3, r1
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	4323      	orrs	r3, r4
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	7003      	strb	r3, [r0, #0]
	Registers[5] = ((Calender->Month/10) << 4) | (Calender->Month % 10);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1d58      	adds	r0, r3, #5
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	789b      	ldrb	r3, [r3, #2]
 8001b12:	4a2f      	ldr	r2, [pc, #188]	; (8001bd0 <PERTC_voidDateTimeToRegisters+0x1b8>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	b25c      	sxtb	r4, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	789a      	ldrb	r2, [r3, #2]
 8001b24:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <PERTC_voidDateTimeToRegisters+0x1b8>)
 8001b26:	fba3 1302 	umull	r1, r3, r3, r2
 8001b2a:	08d9      	lsrs	r1, r3, #3
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	4323      	orrs	r3, r4
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	7003      	strb	r3, [r0, #0]
	Registers[6] = (Calender->Year > 2000)? (((Calender->Year-2000)/10) << 4) | ((Calender->Year-2000) % 10):((Calender->Year/10) << 4) | (Calender->Year % 10) ;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1d98      	adds	r0, r3, #6
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b4e:	d91f      	bls.n	8001b90 <PERTC_voidDateTimeToRegisters+0x178>
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001b58:	4a1e      	ldr	r2, [pc, #120]	; (8001bd4 <PERTC_voidDateTimeToRegisters+0x1bc>)
 8001b5a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b5e:	1092      	asrs	r2, r2, #2
 8001b60:	17db      	asrs	r3, r3, #31
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	b25c      	sxtb	r4, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <PERTC_voidDateTimeToRegisters+0x1bc>)
 8001b72:	fb83 1302 	smull	r1, r3, r3, r2
 8001b76:	1099      	asrs	r1, r3, #2
 8001b78:	17d3      	asrs	r3, r2, #31
 8001b7a:	1ac9      	subs	r1, r1, r3
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	1ad1      	subs	r1, r2, r3
 8001b86:	b24b      	sxtb	r3, r1
 8001b88:	4323      	orrs	r3, r4
 8001b8a:	b25b      	sxtb	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	e018      	b.n	8001bc2 <PERTC_voidDateTimeToRegisters+0x1aa>
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <PERTC_voidDateTimeToRegisters+0x1b8>)
 8001b96:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9a:	08db      	lsrs	r3, r3, #3
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	b25c      	sxtb	r4, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	881a      	ldrh	r2, [r3, #0]
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <PERTC_voidDateTimeToRegisters+0x1b8>)
 8001ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8001bac:	08d9      	lsrs	r1, r3, #3
 8001bae:	460b      	mov	r3, r1
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	b25b      	sxtb	r3, r3
 8001bbc:	4323      	orrs	r3, r4
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	7003      	strb	r3, [r0, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc90      	pop	{r4, r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	cccccccd 	.word	0xcccccccd
 8001bd4:	66666667 	.word	0x66666667

08001bd8 <main>:

void HH(char * H){

	asm("NOP");
}
int main(void){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0

	MRCC_voidInitClock();
 8001bde:	f7fe fb15 	bl	800020c <MRCC_voidInitClock>

	MRCC_voidEnablePeripheral(RCC_PER_GPIOB);
 8001be2:	2021      	movs	r0, #33	; 0x21
 8001be4:	f7fe fb70 	bl	80002c8 <MRCC_voidEnablePeripheral>
	MRCC_voidEnablePeripheral(RCC_PER_GPIOC);
 8001be8:	2022      	movs	r0, #34	; 0x22
 8001bea:	f7fe fb6d 	bl	80002c8 <MRCC_voidEnablePeripheral>
	MRCC_voidEnablePeripheral(RCC_PER_AFIO);
 8001bee:	201e      	movs	r0, #30
 8001bf0:	f7fe fb6a 	bl	80002c8 <MRCC_voidEnablePeripheral>
	MRCC_voidEnablePeripheral(RCC_PER_I2C1);
 8001bf4:	2015      	movs	r0, #21
 8001bf6:	f7fe fb67 	bl	80002c8 <MRCC_voidEnablePeripheral>

	MAFIO_voidRemapI2C1(AFIO_I2C1_MODE_1);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7fe fd70 	bl	80006e0 <MAFIO_voidRemapI2C1>

	MGPIO_voidSetPinDirection(GPIO_PORTB,GPIO_PIN_6,GPIO_DIR_ALTERNATE_FUNCTION_OPEN_DRAIN);
 8001c00:	220e      	movs	r2, #14
 8001c02:	2106      	movs	r1, #6
 8001c04:	2001      	movs	r0, #1
 8001c06:	f7fe fccf 	bl	80005a8 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIO_PORTB,GPIO_PIN_7,GPIO_DIR_ALTERNATE_FUNCTION_OPEN_DRAIN);
 8001c0a:	220e      	movs	r2, #14
 8001c0c:	2107      	movs	r1, #7
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f7fe fcca 	bl	80005a8 <MGPIO_voidSetPinDirection>

	MGPIO_voidSetPinDirection(GPIO_PORTC,GPIO_PIN_13,GPIO_DIR_OUTPUT_PUSH_PULL);
 8001c14:	2202      	movs	r2, #2
 8001c16:	210d      	movs	r1, #13
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f7fe fcc5 	bl	80005a8 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPin(GPIO_PORTC,13);
 8001c1e:	210d      	movs	r1, #13
 8001c20:	2002      	movs	r0, #2
 8001c22:	f7fe fd23 	bl	800066c <MGPIO_voidSetPin>


	ERTCTime_t Time = {10,40,50};
 8001c26:	4a16      	ldr	r2, [pc, #88]	; (8001c80 <main+0xa8>)
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	8019      	strh	r1, [r3, #0]
 8001c32:	3302      	adds	r3, #2
 8001c34:	0c12      	lsrs	r2, r2, #16
 8001c36:	701a      	strb	r2, [r3, #0]
	ERTCCalender_t Date = {22,4,19};
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	809a      	strh	r2, [r3, #4]
 8001c40:	2316      	movs	r3, #22
 8001c42:	80bb      	strh	r3, [r7, #4]
 8001c44:	2304      	movs	r3, #4
 8001c46:	71bb      	strb	r3, [r7, #6]
 8001c48:	2313      	movs	r3, #19
 8001c4a:	71fb      	strb	r3, [r7, #7]

	ERTC_Config_t RTC = {I2C1,ERTC_MODE_12_HOURS};
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	703b      	strb	r3, [r7, #0]
 8001c50:	2300      	movs	r3, #0
 8001c52:	707b      	strb	r3, [r7, #1]

	HRTC_voidInit(&RTC);
 8001c54:	463b      	mov	r3, r7
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fc44 	bl	80014e4 <HRTC_voidInit>
	HRTC_voidSetOutputMode(&RTC,ERTC_OUTPUT_MODE_4096HZ);
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	2111      	movs	r1, #17
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fd9f 	bl	80017a4 <HRTC_voidSetOutputMode>
	MGPIO_voidClearPin(GPIO_PORTC,13);
 8001c66:	210d      	movs	r1, #13
 8001c68:	2002      	movs	r0, #2
 8001c6a:	f7fe fd1b 	bl	80006a4 <MGPIO_voidClearPin>
//
//	Status = MI2C_enuMasterReadSynch(I2C1,8,Receivedata,4);

	while(1){

		HRTC_voidGetDateTime(&RTC,&Date,&Time);
 8001c6e:	f107 020c 	add.w	r2, r7, #12
 8001c72:	1d39      	adds	r1, r7, #4
 8001c74:	463b      	mov	r3, r7
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fc78 	bl	800156c <HRTC_voidGetDateTime>
 8001c7c:	e7f7      	b.n	8001c6e <main+0x96>
 8001c7e:	bf00      	nop
 8001c80:	08001f0c 	.word	0x08001f0c

08001c84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c8a:	e003      	b.n	8001c94 <LoopCopyDataInit>

08001c8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001c8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c92:	3104      	adds	r1, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c94:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001c98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c9c:	d3f6      	bcc.n	8001c8c <CopyDataInit>
	ldr	r2, =_sbss
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001ca0:	e002      	b.n	8001ca8 <LoopFillZerobss>

08001ca2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ca2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ca4:	f842 3b04 	str.w	r3, [r2], #4

08001ca8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001caa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001cac:	d3f9      	bcc.n	8001ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cae:	f000 f837 	bl	8001d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cb2:	f000 f8ef 	bl	8001e94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cb6:	f7ff ff8f 	bl	8001bd8 <main>
	bx	lr
 8001cba:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cbc:	20002800 	.word	0x20002800
	ldr	r3, =_sidata
 8001cc0:	08001f18 	.word	0x08001f18
	ldr	r0, =_sdata
 8001cc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001cc8:	20000038 	.word	0x20000038
	ldr	r2, =_sbss
 8001ccc:	20000038 	.word	0x20000038
	ldr	r3, = _ebss
 8001cd0:	20000130 	.word	0x20000130

08001cd4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <CAN1_RX1_IRQHandler>

08001cd6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr

08001ce2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <MemManage_Handler+0x4>

08001cee <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfa <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
	...

08001d20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d24:	4a15      	ldr	r2, [pc, #84]	; (8001d7c <SystemInit+0x5c>)
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <SystemInit+0x5c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001d30:	4912      	ldr	r1, [pc, #72]	; (8001d7c <SystemInit+0x5c>)
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <SystemInit+0x5c>)
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <SystemInit+0x60>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d3c:	4a0f      	ldr	r2, [pc, #60]	; (8001d7c <SystemInit+0x5c>)
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <SystemInit+0x5c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d4c:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <SystemInit+0x5c>)
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <SystemInit+0x5c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d56:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001d58:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <SystemInit+0x5c>)
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <SystemInit+0x5c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001d62:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <SystemInit+0x5c>)
 8001d66:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001d6a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001d6c:	f000 f80c 	bl	8001d88 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SystemInit+0x64>)
 8001d72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d76:	609a      	str	r2, [r3, #8]
#endif 
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	f8ff0000 	.word	0xf8ff0000
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001d8c:	f000 f802 	bl	8001d94 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001da2:	4a3a      	ldr	r2, [pc, #232]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001da4:	4b39      	ldr	r3, [pc, #228]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001dae:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d103      	bne.n	8001dcc <SetSysClockTo72+0x38>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001dca:	d1f0      	bne.n	8001dae <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001dcc:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	e001      	b.n	8001de2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001dde:	2300      	movs	r3, #0
 8001de0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d14b      	bne.n	8001e80 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001de8:	4a29      	ldr	r2, [pc, #164]	; (8001e90 <SetSysClockTo72+0xfc>)
 8001dea:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <SetSysClockTo72+0xfc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f043 0310 	orr.w	r3, r3, #16
 8001df2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001df4:	4a26      	ldr	r2, [pc, #152]	; (8001e90 <SetSysClockTo72+0xfc>)
 8001df6:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <SetSysClockTo72+0xfc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 0303 	bic.w	r3, r3, #3
 8001dfe:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001e00:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <SetSysClockTo72+0xfc>)
 8001e02:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <SetSysClockTo72+0xfc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001e0c:	4a1f      	ldr	r2, [pc, #124]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001e14:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001e1c:	4a1b      	ldr	r2, [pc, #108]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e26:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001e28:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001e32:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001e34:	4a15      	ldr	r2, [pc, #84]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001e3e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001e40:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e4a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001e4c:	bf00      	nop
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f9      	beq.n	8001e4e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f023 0303 	bic.w	r3, r3, #3
 8001e64:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001e66:	4a09      	ldr	r2, [pc, #36]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001e72:	bf00      	nop
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <SetSysClockTo72+0xf8>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d1f9      	bne.n	8001e74 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40022000 	.word	0x40022000

08001e94 <__libc_init_array>:
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	2500      	movs	r5, #0
 8001e98:	4e0c      	ldr	r6, [pc, #48]	; (8001ecc <__libc_init_array+0x38>)
 8001e9a:	4c0d      	ldr	r4, [pc, #52]	; (8001ed0 <__libc_init_array+0x3c>)
 8001e9c:	1ba4      	subs	r4, r4, r6
 8001e9e:	10a4      	asrs	r4, r4, #2
 8001ea0:	42a5      	cmp	r5, r4
 8001ea2:	d109      	bne.n	8001eb8 <__libc_init_array+0x24>
 8001ea4:	f000 f81a 	bl	8001edc <_init>
 8001ea8:	2500      	movs	r5, #0
 8001eaa:	4e0a      	ldr	r6, [pc, #40]	; (8001ed4 <__libc_init_array+0x40>)
 8001eac:	4c0a      	ldr	r4, [pc, #40]	; (8001ed8 <__libc_init_array+0x44>)
 8001eae:	1ba4      	subs	r4, r4, r6
 8001eb0:	10a4      	asrs	r4, r4, #2
 8001eb2:	42a5      	cmp	r5, r4
 8001eb4:	d105      	bne.n	8001ec2 <__libc_init_array+0x2e>
 8001eb6:	bd70      	pop	{r4, r5, r6, pc}
 8001eb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ebc:	4798      	blx	r3
 8001ebe:	3501      	adds	r5, #1
 8001ec0:	e7ee      	b.n	8001ea0 <__libc_init_array+0xc>
 8001ec2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ec6:	4798      	blx	r3
 8001ec8:	3501      	adds	r5, #1
 8001eca:	e7f2      	b.n	8001eb2 <__libc_init_array+0x1e>
 8001ecc:	08001f10 	.word	0x08001f10
 8001ed0:	08001f10 	.word	0x08001f10
 8001ed4:	08001f10 	.word	0x08001f10
 8001ed8:	08001f14 	.word	0x08001f14

08001edc <_init>:
 8001edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ede:	bf00      	nop
 8001ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ee2:	bc08      	pop	{r3}
 8001ee4:	469e      	mov	lr, r3
 8001ee6:	4770      	bx	lr

08001ee8 <_fini>:
 8001ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eea:	bf00      	nop
 8001eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eee:	bc08      	pop	{r3}
 8001ef0:	469e      	mov	lr, r3
 8001ef2:	4770      	bx	lr
