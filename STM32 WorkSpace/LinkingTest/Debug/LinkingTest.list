
LinkingTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ba0  08000ba0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000ba0  08000ba0  00010ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000ba4  08000ba4  00010ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08000ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f4  20000008  08000bb0  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200000fc  08000bb0  000200fc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002731  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000a38  00000000  00000000  00022762  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000518  00000000  00000000  000231a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000480  00000000  00000000  000236b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001478  00000000  00000000  00023b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002242  00000000  00000000  00024fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000271f2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001348  00000000  00000000  00027270  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000285b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000008 	.word	0x20000008
 8000128:	00000000 	.word	0x00000000
 800012c:	08000b88 	.word	0x08000b88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000000c 	.word	0x2000000c
 8000148:	08000b88 	.word	0x08000b88

0800014c <SysTick_Handler>:
void MSTK_voidClibrate(void){
	
}


void SysTick_Handler(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(PSTK_voidUnderFlowCallBack != 0)
 8000150:	4b0a      	ldr	r3, [pc, #40]	; (800017c <SysTick_Handler+0x30>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d002      	beq.n	800015e <SysTick_Handler+0x12>
		PSTK_voidUnderFlowCallBack();
 8000158:	4b08      	ldr	r3, [pc, #32]	; (800017c <SysTick_Handler+0x30>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4798      	blx	r3
	STK_REG->CTRL;
 800015e:	4b08      	ldr	r3, [pc, #32]	; (8000180 <SysTick_Handler+0x34>)
 8000160:	681b      	ldr	r3, [r3, #0]
	if(PSTK_u8SingleInterruptFlag == 1)
 8000162:	4b08      	ldr	r3, [pc, #32]	; (8000184 <SysTick_Handler+0x38>)
 8000164:	781b      	ldrb	r3, [r3, #0]
 8000166:	2b01      	cmp	r3, #1
 8000168:	d105      	bne.n	8000176 <SysTick_Handler+0x2a>
		CLR_BIT(STK_REG->CTRL,1);
 800016a:	4a05      	ldr	r2, [pc, #20]	; (8000180 <SysTick_Handler+0x34>)
 800016c:	4b04      	ldr	r3, [pc, #16]	; (8000180 <SysTick_Handler+0x34>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	f023 0302 	bic.w	r3, r3, #2
 8000174:	6013      	str	r3, [r2, #0]
}
 8000176:	bf00      	nop
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	20000028 	.word	0x20000028
 8000180:	e000e010 	.word	0xe000e010
 8000184:	20000024 	.word	0x20000024

08000188 <TAMPER_IRQHandler>:
void MBKP_voidSetTamperCallBack(void(*CallBack)(void)){
	PBKP_voidCallBack = CallBack;
}


void TAMPER_IRQHandler(void){
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	if(PBKP_voidCallBack != 0)
 800018c:	4b07      	ldr	r3, [pc, #28]	; (80001ac <TAMPER_IRQHandler+0x24>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d002      	beq.n	800019a <TAMPER_IRQHandler+0x12>
		PBKP_voidCallBack();
 8000194:	4b05      	ldr	r3, [pc, #20]	; (80001ac <TAMPER_IRQHandler+0x24>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4798      	blx	r3
	
	SET_BIT(BKP_REG->CSR,1);
 800019a:	4a05      	ldr	r2, [pc, #20]	; (80001b0 <TAMPER_IRQHandler+0x28>)
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <TAMPER_IRQHandler+0x28>)
 800019e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001a0:	f043 0302 	orr.w	r3, r3, #2
 80001a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80001a6:	bf00      	nop
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	40006c00 	.word	0x40006c00

080001b4 <RCC_IRQHandler>:
	Local_u32BusClock = Local_u32SystemClock/Local_u16Division;
	return Local_u32BusClock;
}


void RCC_IRQHandler(void){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
	if(CHK_BIT(RCC_REG->CIR,RCC_INTERRUPT_LSI_READY)){
 80001b8:	4b30      	ldr	r3, [pc, #192]	; (800027c <RCC_IRQHandler+0xc8>)
 80001ba:	689b      	ldr	r3, [r3, #8]
 80001bc:	f003 0301 	and.w	r3, r3, #1
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d00c      	beq.n	80001de <RCC_IRQHandler+0x2a>
		if (PRCC_voidCallBacks[0] != 0)
 80001c4:	4b2e      	ldr	r3, [pc, #184]	; (8000280 <RCC_IRQHandler+0xcc>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d002      	beq.n	80001d2 <RCC_IRQHandler+0x1e>
			PRCC_voidCallBacks[0]();
 80001cc:	4b2c      	ldr	r3, [pc, #176]	; (8000280 <RCC_IRQHandler+0xcc>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4798      	blx	r3
		SET_BIT(RCC_REG->CIR,16);
 80001d2:	4a2a      	ldr	r2, [pc, #168]	; (800027c <RCC_IRQHandler+0xc8>)
 80001d4:	4b29      	ldr	r3, [pc, #164]	; (800027c <RCC_IRQHandler+0xc8>)
 80001d6:	689b      	ldr	r3, [r3, #8]
 80001d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001dc:	6093      	str	r3, [r2, #8]
	}

	if(CHK_BIT(RCC_REG->CIR,RCC_INTERRUPT_LSE_READY)){
 80001de:	4b27      	ldr	r3, [pc, #156]	; (800027c <RCC_IRQHandler+0xc8>)
 80001e0:	689b      	ldr	r3, [r3, #8]
 80001e2:	f003 0302 	and.w	r3, r3, #2
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d00c      	beq.n	8000204 <RCC_IRQHandler+0x50>
		if (PRCC_voidCallBacks[1] != 0)
 80001ea:	4b25      	ldr	r3, [pc, #148]	; (8000280 <RCC_IRQHandler+0xcc>)
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d002      	beq.n	80001f8 <RCC_IRQHandler+0x44>
			PRCC_voidCallBacks[1]();
 80001f2:	4b23      	ldr	r3, [pc, #140]	; (8000280 <RCC_IRQHandler+0xcc>)
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	4798      	blx	r3
		SET_BIT(RCC_REG->CIR,17);
 80001f8:	4a20      	ldr	r2, [pc, #128]	; (800027c <RCC_IRQHandler+0xc8>)
 80001fa:	4b20      	ldr	r3, [pc, #128]	; (800027c <RCC_IRQHandler+0xc8>)
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000202:	6093      	str	r3, [r2, #8]
	}

	if(CHK_BIT(RCC_REG->CIR,RCC_INTERRUPT_HSI_READY)){
 8000204:	4b1d      	ldr	r3, [pc, #116]	; (800027c <RCC_IRQHandler+0xc8>)
 8000206:	689b      	ldr	r3, [r3, #8]
 8000208:	f003 0304 	and.w	r3, r3, #4
 800020c:	2b00      	cmp	r3, #0
 800020e:	d00c      	beq.n	800022a <RCC_IRQHandler+0x76>
			if (PRCC_voidCallBacks[2] != 0)
 8000210:	4b1b      	ldr	r3, [pc, #108]	; (8000280 <RCC_IRQHandler+0xcc>)
 8000212:	689b      	ldr	r3, [r3, #8]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d002      	beq.n	800021e <RCC_IRQHandler+0x6a>
				PRCC_voidCallBacks[2]();
 8000218:	4b19      	ldr	r3, [pc, #100]	; (8000280 <RCC_IRQHandler+0xcc>)
 800021a:	689b      	ldr	r3, [r3, #8]
 800021c:	4798      	blx	r3
			SET_BIT(RCC_REG->CIR,18);
 800021e:	4a17      	ldr	r2, [pc, #92]	; (800027c <RCC_IRQHandler+0xc8>)
 8000220:	4b16      	ldr	r3, [pc, #88]	; (800027c <RCC_IRQHandler+0xc8>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000228:	6093      	str	r3, [r2, #8]
		}

	if(CHK_BIT(RCC_REG->CIR,RCC_INTERRUPT_LSE_READY)){
 800022a:	4b14      	ldr	r3, [pc, #80]	; (800027c <RCC_IRQHandler+0xc8>)
 800022c:	689b      	ldr	r3, [r3, #8]
 800022e:	f003 0302 	and.w	r3, r3, #2
 8000232:	2b00      	cmp	r3, #0
 8000234:	d00c      	beq.n	8000250 <RCC_IRQHandler+0x9c>
			if (PRCC_voidCallBacks[3] != 0)
 8000236:	4b12      	ldr	r3, [pc, #72]	; (8000280 <RCC_IRQHandler+0xcc>)
 8000238:	68db      	ldr	r3, [r3, #12]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d002      	beq.n	8000244 <RCC_IRQHandler+0x90>
				PRCC_voidCallBacks[3]();
 800023e:	4b10      	ldr	r3, [pc, #64]	; (8000280 <RCC_IRQHandler+0xcc>)
 8000240:	68db      	ldr	r3, [r3, #12]
 8000242:	4798      	blx	r3
			SET_BIT(RCC_REG->CIR,19);
 8000244:	4a0d      	ldr	r2, [pc, #52]	; (800027c <RCC_IRQHandler+0xc8>)
 8000246:	4b0d      	ldr	r3, [pc, #52]	; (800027c <RCC_IRQHandler+0xc8>)
 8000248:	689b      	ldr	r3, [r3, #8]
 800024a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800024e:	6093      	str	r3, [r2, #8]
		}

	if(CHK_BIT(RCC_REG->CIR,RCC_INTERRUPT_PLL_READY)){
 8000250:	4b0a      	ldr	r3, [pc, #40]	; (800027c <RCC_IRQHandler+0xc8>)
 8000252:	689b      	ldr	r3, [r3, #8]
 8000254:	f003 0310 	and.w	r3, r3, #16
 8000258:	2b00      	cmp	r3, #0
 800025a:	d00c      	beq.n	8000276 <RCC_IRQHandler+0xc2>
			if (PRCC_voidCallBacks[4] != 0)
 800025c:	4b08      	ldr	r3, [pc, #32]	; (8000280 <RCC_IRQHandler+0xcc>)
 800025e:	691b      	ldr	r3, [r3, #16]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d002      	beq.n	800026a <RCC_IRQHandler+0xb6>
				PRCC_voidCallBacks[4]();
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <RCC_IRQHandler+0xcc>)
 8000266:	691b      	ldr	r3, [r3, #16]
 8000268:	4798      	blx	r3
			SET_BIT(RCC_REG->CIR,20);
 800026a:	4a04      	ldr	r2, [pc, #16]	; (800027c <RCC_IRQHandler+0xc8>)
 800026c:	4b03      	ldr	r3, [pc, #12]	; (800027c <RCC_IRQHandler+0xc8>)
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000274:	6093      	str	r3, [r2, #8]
		}
}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40021000 	.word	0x40021000
 8000280:	20000030 	.word	0x20000030

08000284 <EXTI0_IRQHandler>:
		return;
	SET_BIT(EXTI_REG->PR,Line);
}


void EXTI0_IRQHandler(void){
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	if(PEXTI_CallBacks[0] != 0)
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <EXTI0_IRQHandler+0x24>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d002      	beq.n	8000296 <EXTI0_IRQHandler+0x12>
		PEXTI_CallBacks[0]();
 8000290:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <EXTI0_IRQHandler+0x24>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4798      	blx	r3
	SET_BIT(EXTI_REG->PR,0);
 8000296:	4a05      	ldr	r2, [pc, #20]	; (80002ac <EXTI0_IRQHandler+0x28>)
 8000298:	4b04      	ldr	r3, [pc, #16]	; (80002ac <EXTI0_IRQHandler+0x28>)
 800029a:	695b      	ldr	r3, [r3, #20]
 800029c:	f043 0301 	orr.w	r3, r3, #1
 80002a0:	6153      	str	r3, [r2, #20]
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000044 	.word	0x20000044
 80002ac:	40010400 	.word	0x40010400

080002b0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	if(PEXTI_CallBacks[1] != 0)
 80002b4:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <EXTI1_IRQHandler+0x24>)
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d002      	beq.n	80002c2 <EXTI1_IRQHandler+0x12>
		PEXTI_CallBacks[1]();
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <EXTI1_IRQHandler+0x24>)
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	4798      	blx	r3
	SET_BIT(EXTI_REG->PR,1);
 80002c2:	4a05      	ldr	r2, [pc, #20]	; (80002d8 <EXTI1_IRQHandler+0x28>)
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <EXTI1_IRQHandler+0x28>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	f043 0302 	orr.w	r3, r3, #2
 80002cc:	6153      	str	r3, [r2, #20]
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000044 	.word	0x20000044
 80002d8:	40010400 	.word	0x40010400

080002dc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	if(PEXTI_CallBacks[2] != 0)
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <EXTI2_IRQHandler+0x24>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d002      	beq.n	80002ee <EXTI2_IRQHandler+0x12>
		PEXTI_CallBacks[2]();
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <EXTI2_IRQHandler+0x24>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4798      	blx	r3
	SET_BIT(EXTI_REG->PR,2);
 80002ee:	4a05      	ldr	r2, [pc, #20]	; (8000304 <EXTI2_IRQHandler+0x28>)
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <EXTI2_IRQHandler+0x28>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	f043 0304 	orr.w	r3, r3, #4
 80002f8:	6153      	str	r3, [r2, #20]
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	20000044 	.word	0x20000044
 8000304:	40010400 	.word	0x40010400

08000308 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	if(PEXTI_CallBacks[3] != 0)
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <EXTI3_IRQHandler+0x24>)
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d002      	beq.n	800031a <EXTI3_IRQHandler+0x12>
		PEXTI_CallBacks[3]();
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <EXTI3_IRQHandler+0x24>)
 8000316:	68db      	ldr	r3, [r3, #12]
 8000318:	4798      	blx	r3
	SET_BIT(EXTI_REG->PR,3);
 800031a:	4a05      	ldr	r2, [pc, #20]	; (8000330 <EXTI3_IRQHandler+0x28>)
 800031c:	4b04      	ldr	r3, [pc, #16]	; (8000330 <EXTI3_IRQHandler+0x28>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	f043 0308 	orr.w	r3, r3, #8
 8000324:	6153      	str	r3, [r2, #20]
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000044 	.word	0x20000044
 8000330:	40010400 	.word	0x40010400

08000334 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	if(PEXTI_CallBacks[4] != 0)
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <EXTI4_IRQHandler+0x24>)
 800033a:	691b      	ldr	r3, [r3, #16]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d002      	beq.n	8000346 <EXTI4_IRQHandler+0x12>
		PEXTI_CallBacks[4]();
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <EXTI4_IRQHandler+0x24>)
 8000342:	691b      	ldr	r3, [r3, #16]
 8000344:	4798      	blx	r3
	SET_BIT(EXTI_REG->PR,4);
 8000346:	4a05      	ldr	r2, [pc, #20]	; (800035c <EXTI4_IRQHandler+0x28>)
 8000348:	4b04      	ldr	r3, [pc, #16]	; (800035c <EXTI4_IRQHandler+0x28>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f043 0310 	orr.w	r3, r3, #16
 8000350:	6153      	str	r3, [r2, #20]
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000044 	.word	0x20000044
 800035c:	40010400 	.word	0x40010400

08000360 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	if(CHK_BIT(EXTI_REG->PR,5)){
 8000364:	4b30      	ldr	r3, [pc, #192]	; (8000428 <EXTI9_5_IRQHandler+0xc8>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	f003 0320 	and.w	r3, r3, #32
 800036c:	2b00      	cmp	r3, #0
 800036e:	d00c      	beq.n	800038a <EXTI9_5_IRQHandler+0x2a>
		if(PEXTI_CallBacks[5] != 0)
 8000370:	4b2e      	ldr	r3, [pc, #184]	; (800042c <EXTI9_5_IRQHandler+0xcc>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d002      	beq.n	800037e <EXTI9_5_IRQHandler+0x1e>
			PEXTI_CallBacks[5]();
 8000378:	4b2c      	ldr	r3, [pc, #176]	; (800042c <EXTI9_5_IRQHandler+0xcc>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4798      	blx	r3
		SET_BIT(EXTI_REG->PR,5);
 800037e:	4a2a      	ldr	r2, [pc, #168]	; (8000428 <EXTI9_5_IRQHandler+0xc8>)
 8000380:	4b29      	ldr	r3, [pc, #164]	; (8000428 <EXTI9_5_IRQHandler+0xc8>)
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	f043 0320 	orr.w	r3, r3, #32
 8000388:	6153      	str	r3, [r2, #20]
	}
	
	if(CHK_BIT(EXTI_REG->PR,6)){
 800038a:	4b27      	ldr	r3, [pc, #156]	; (8000428 <EXTI9_5_IRQHandler+0xc8>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000392:	2b00      	cmp	r3, #0
 8000394:	d00c      	beq.n	80003b0 <EXTI9_5_IRQHandler+0x50>
		if(PEXTI_CallBacks[6] != 0)
 8000396:	4b25      	ldr	r3, [pc, #148]	; (800042c <EXTI9_5_IRQHandler+0xcc>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d002      	beq.n	80003a4 <EXTI9_5_IRQHandler+0x44>
			PEXTI_CallBacks[6]();
 800039e:	4b23      	ldr	r3, [pc, #140]	; (800042c <EXTI9_5_IRQHandler+0xcc>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4798      	blx	r3
		SET_BIT(EXTI_REG->PR,6);
 80003a4:	4a20      	ldr	r2, [pc, #128]	; (8000428 <EXTI9_5_IRQHandler+0xc8>)
 80003a6:	4b20      	ldr	r3, [pc, #128]	; (8000428 <EXTI9_5_IRQHandler+0xc8>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ae:	6153      	str	r3, [r2, #20]
	}
	
	if(CHK_BIT(EXTI_REG->PR,7)){
 80003b0:	4b1d      	ldr	r3, [pc, #116]	; (8000428 <EXTI9_5_IRQHandler+0xc8>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d00c      	beq.n	80003d6 <EXTI9_5_IRQHandler+0x76>
		if(PEXTI_CallBacks[7] != 0)
 80003bc:	4b1b      	ldr	r3, [pc, #108]	; (800042c <EXTI9_5_IRQHandler+0xcc>)
 80003be:	69db      	ldr	r3, [r3, #28]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d002      	beq.n	80003ca <EXTI9_5_IRQHandler+0x6a>
			PEXTI_CallBacks[7]();
 80003c4:	4b19      	ldr	r3, [pc, #100]	; (800042c <EXTI9_5_IRQHandler+0xcc>)
 80003c6:	69db      	ldr	r3, [r3, #28]
 80003c8:	4798      	blx	r3
		SET_BIT(EXTI_REG->PR,7);
 80003ca:	4a17      	ldr	r2, [pc, #92]	; (8000428 <EXTI9_5_IRQHandler+0xc8>)
 80003cc:	4b16      	ldr	r3, [pc, #88]	; (8000428 <EXTI9_5_IRQHandler+0xc8>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d4:	6153      	str	r3, [r2, #20]
	}
	
	if(CHK_BIT(EXTI_REG->PR,8)){
 80003d6:	4b14      	ldr	r3, [pc, #80]	; (8000428 <EXTI9_5_IRQHandler+0xc8>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d00c      	beq.n	80003fc <EXTI9_5_IRQHandler+0x9c>
		if(PEXTI_CallBacks[8] != 0)
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <EXTI9_5_IRQHandler+0xcc>)
 80003e4:	6a1b      	ldr	r3, [r3, #32]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d002      	beq.n	80003f0 <EXTI9_5_IRQHandler+0x90>
			PEXTI_CallBacks[8]();
 80003ea:	4b10      	ldr	r3, [pc, #64]	; (800042c <EXTI9_5_IRQHandler+0xcc>)
 80003ec:	6a1b      	ldr	r3, [r3, #32]
 80003ee:	4798      	blx	r3
		SET_BIT(EXTI_REG->PR,8);
 80003f0:	4a0d      	ldr	r2, [pc, #52]	; (8000428 <EXTI9_5_IRQHandler+0xc8>)
 80003f2:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <EXTI9_5_IRQHandler+0xc8>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003fa:	6153      	str	r3, [r2, #20]
	}
	
	if(CHK_BIT(EXTI_REG->PR,9)){
 80003fc:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <EXTI9_5_IRQHandler+0xc8>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000404:	2b00      	cmp	r3, #0
 8000406:	d00c      	beq.n	8000422 <EXTI9_5_IRQHandler+0xc2>
		if(PEXTI_CallBacks[9] != 0)
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <EXTI9_5_IRQHandler+0xcc>)
 800040a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800040c:	2b00      	cmp	r3, #0
 800040e:	d002      	beq.n	8000416 <EXTI9_5_IRQHandler+0xb6>
			PEXTI_CallBacks[9]();
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <EXTI9_5_IRQHandler+0xcc>)
 8000412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000414:	4798      	blx	r3
		SET_BIT(EXTI_REG->PR,9);
 8000416:	4a04      	ldr	r2, [pc, #16]	; (8000428 <EXTI9_5_IRQHandler+0xc8>)
 8000418:	4b03      	ldr	r3, [pc, #12]	; (8000428 <EXTI9_5_IRQHandler+0xc8>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000420:	6153      	str	r3, [r2, #20]
	}
	
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40010400 	.word	0x40010400
 800042c:	20000044 	.word	0x20000044

08000430 <PVD_IRQHandler>:
		SET_BIT(EXTI_REG->PR,15);
	}
}


void PVD_IRQHandler(void){
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	if(CHK_BIT(EXTI_REG->PR,16)){
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <PVD_IRQHandler+0x30>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800043c:	2b00      	cmp	r3, #0
 800043e:	d00c      	beq.n	800045a <PVD_IRQHandler+0x2a>
		if(PEXTI_CallBacks[16] != 0)
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <PVD_IRQHandler+0x34>)
 8000442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000444:	2b00      	cmp	r3, #0
 8000446:	d002      	beq.n	800044e <PVD_IRQHandler+0x1e>
			PEXTI_CallBacks[16]();
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <PVD_IRQHandler+0x34>)
 800044a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800044c:	4798      	blx	r3
		SET_BIT(EXTI_REG->PR,16);
 800044e:	4a04      	ldr	r2, [pc, #16]	; (8000460 <PVD_IRQHandler+0x30>)
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <PVD_IRQHandler+0x30>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000458:	6153      	str	r3, [r2, #20]
	}
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40010400 	.word	0x40010400
 8000464:	20000044 	.word	0x20000044

08000468 <RTCAlarm_IRQHandler>:


void RTCAlarm_IRQHandler(void){
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	if(CHK_BIT(EXTI_REG->PR,17)){
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <RTCAlarm_IRQHandler+0x30>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000474:	2b00      	cmp	r3, #0
 8000476:	d00c      	beq.n	8000492 <RTCAlarm_IRQHandler+0x2a>
		if(PEXTI_CallBacks[17] != 0)
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <RTCAlarm_IRQHandler+0x34>)
 800047a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800047c:	2b00      	cmp	r3, #0
 800047e:	d002      	beq.n	8000486 <RTCAlarm_IRQHandler+0x1e>
			PEXTI_CallBacks[17]();
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <RTCAlarm_IRQHandler+0x34>)
 8000482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000484:	4798      	blx	r3
		SET_BIT(EXTI_REG->PR,17);
 8000486:	4a04      	ldr	r2, [pc, #16]	; (8000498 <RTCAlarm_IRQHandler+0x30>)
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <RTCAlarm_IRQHandler+0x30>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000490:	6153      	str	r3, [r2, #20]
	}

}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40010400 	.word	0x40010400
 800049c:	20000044 	.word	0x20000044

080004a0 <USBWakeUp_IRQHandler>:

void USBWakeUp_IRQHandler(void){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	if(CHK_BIT(EXTI_REG->PR,18)){
 80004a4:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <USBWakeUp_IRQHandler+0x30>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d00c      	beq.n	80004ca <USBWakeUp_IRQHandler+0x2a>
		if(PEXTI_CallBacks[18] != 0)
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <USBWakeUp_IRQHandler+0x34>)
 80004b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d002      	beq.n	80004be <USBWakeUp_IRQHandler+0x1e>
			PEXTI_CallBacks[18]();
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <USBWakeUp_IRQHandler+0x34>)
 80004ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004bc:	4798      	blx	r3
		SET_BIT(EXTI_REG->PR,18);
 80004be:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <USBWakeUp_IRQHandler+0x30>)
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <USBWakeUp_IRQHandler+0x30>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004c8:	6153      	str	r3, [r2, #20]
	}
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40010400 	.word	0x40010400
 80004d4:	20000044 	.word	0x20000044

080004d8 <ADC1_2_IRQHandler>:
	if(ADC > ADC2 || Interrupt > ADC_INTERRUPT_END_INJECTED || Interrupt < ADC_INTERRUPT_END_REGULAR)
		return;
	ADCSInterruptHandlers[ADC][Interrupt] = CallBack;
}

void ADC1_2_IRQHandler(void){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	if(CHK_BIT(ADCS[ADC1]->SR,0) && ADCSInterruptHandlers[0][1] != 0){	//Analog WatchDog, ADC1
 80004dc:	4b42      	ldr	r3, [pc, #264]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d00e      	beq.n	8000508 <ADC1_2_IRQHandler+0x30>
 80004ea:	4b40      	ldr	r3, [pc, #256]	; (80005ec <ADC1_2_IRQHandler+0x114>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d00a      	beq.n	8000508 <ADC1_2_IRQHandler+0x30>
		ADCSInterruptHandlers[0][1]();
 80004f2:	4b3e      	ldr	r3, [pc, #248]	; (80005ec <ADC1_2_IRQHandler+0x114>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	4798      	blx	r3
		ADCS[ADC1]->SR &= ~1;
 80004f8:	4b3b      	ldr	r3, [pc, #236]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a3a      	ldr	r2, [pc, #232]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 80004fe:	6812      	ldr	r2, [r2, #0]
 8000500:	6812      	ldr	r2, [r2, #0]
 8000502:	f022 0201 	bic.w	r2, r2, #1
 8000506:	601a      	str	r2, [r3, #0]
	}

	if(CHK_BIT(ADCS[ADC1]->SR,1) && ADCSInterruptHandlers[0][0] != 0){	//End of Regular Conversion, ADC1
 8000508:	4b37      	ldr	r3, [pc, #220]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f003 0302 	and.w	r3, r3, #2
 8000512:	2b00      	cmp	r3, #0
 8000514:	d00e      	beq.n	8000534 <ADC1_2_IRQHandler+0x5c>
 8000516:	4b35      	ldr	r3, [pc, #212]	; (80005ec <ADC1_2_IRQHandler+0x114>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d00a      	beq.n	8000534 <ADC1_2_IRQHandler+0x5c>
		ADCSInterruptHandlers[0][0]();
 800051e:	4b33      	ldr	r3, [pc, #204]	; (80005ec <ADC1_2_IRQHandler+0x114>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4798      	blx	r3
		ADCS[ADC1]->SR &= ~2;
 8000524:	4b30      	ldr	r3, [pc, #192]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a2f      	ldr	r2, [pc, #188]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 800052a:	6812      	ldr	r2, [r2, #0]
 800052c:	6812      	ldr	r2, [r2, #0]
 800052e:	f022 0202 	bic.w	r2, r2, #2
 8000532:	601a      	str	r2, [r3, #0]
	}

	if(CHK_BIT(ADCS[ADC1]->SR,2) && ADCSInterruptHandlers[0][2] != 0){	//End of Injected Conversion, ADC1
 8000534:	4b2c      	ldr	r3, [pc, #176]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f003 0304 	and.w	r3, r3, #4
 800053e:	2b00      	cmp	r3, #0
 8000540:	d00e      	beq.n	8000560 <ADC1_2_IRQHandler+0x88>
 8000542:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <ADC1_2_IRQHandler+0x114>)
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d00a      	beq.n	8000560 <ADC1_2_IRQHandler+0x88>
		ADCSInterruptHandlers[0][2]();
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <ADC1_2_IRQHandler+0x114>)
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	4798      	blx	r3
		ADCS[ADC1]->SR &= ~4;
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a24      	ldr	r2, [pc, #144]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 8000556:	6812      	ldr	r2, [r2, #0]
 8000558:	6812      	ldr	r2, [r2, #0]
 800055a:	f022 0204 	bic.w	r2, r2, #4
 800055e:	601a      	str	r2, [r3, #0]
	}

	if(CHK_BIT(ADCS[ADC2]->SR,0) && ADCSInterruptHandlers[1][1] != 0){	//Analog WatchDog, ADC2
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	2b00      	cmp	r3, #0
 800056c:	d00e      	beq.n	800058c <ADC1_2_IRQHandler+0xb4>
 800056e:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <ADC1_2_IRQHandler+0x114>)
 8000570:	691b      	ldr	r3, [r3, #16]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d00a      	beq.n	800058c <ADC1_2_IRQHandler+0xb4>
		ADCSInterruptHandlers[1][1]();
 8000576:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <ADC1_2_IRQHandler+0x114>)
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	4798      	blx	r3
		ADCS[ADC2]->SR &= ~1;
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	4a19      	ldr	r2, [pc, #100]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 8000582:	6852      	ldr	r2, [r2, #4]
 8000584:	6812      	ldr	r2, [r2, #0]
 8000586:	f022 0201 	bic.w	r2, r2, #1
 800058a:	601a      	str	r2, [r3, #0]
	}

	if(CHK_BIT(ADCS[ADC2]->SR,1) && ADCSInterruptHandlers[1][0] != 0){	//End of Regular Conversion, ADC2
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f003 0302 	and.w	r3, r3, #2
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00e      	beq.n	80005b8 <ADC1_2_IRQHandler+0xe0>
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <ADC1_2_IRQHandler+0x114>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d00a      	beq.n	80005b8 <ADC1_2_IRQHandler+0xe0>
		ADCSInterruptHandlers[1][0]();
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <ADC1_2_IRQHandler+0x114>)
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	4798      	blx	r3
		ADCS[ADC2]->SR &= ~2;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 80005ae:	6852      	ldr	r2, [r2, #4]
 80005b0:	6812      	ldr	r2, [r2, #0]
 80005b2:	f022 0202 	bic.w	r2, r2, #2
 80005b6:	601a      	str	r2, [r3, #0]
	}

	if(CHK_BIT(ADCS[ADC2]->SR,2) && ADCSInterruptHandlers[1][2] != 0){	//End of Injected Conversion, ADC2
 80005b8:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d00e      	beq.n	80005e4 <ADC1_2_IRQHandler+0x10c>
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <ADC1_2_IRQHandler+0x114>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d00a      	beq.n	80005e4 <ADC1_2_IRQHandler+0x10c>
		ADCSInterruptHandlers[1][2]();
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <ADC1_2_IRQHandler+0x114>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4798      	blx	r3
		ADCS[ADC2]->SR &= ~4;
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	4a03      	ldr	r2, [pc, #12]	; (80005e8 <ADC1_2_IRQHandler+0x110>)
 80005da:	6852      	ldr	r2, [r2, #4]
 80005dc:	6812      	ldr	r2, [r2, #0]
 80005de:	f022 0204 	bic.w	r2, r2, #4
 80005e2:	601a      	str	r2, [r3, #0]
	}
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000090 	.word	0x20000090

080005f0 <DMA1_Channel1_IRQHandler>:
		return;
	CLR_BIT(DMA1_REG->CHANNEL[Channel].CCR,(1+Interrupt));
}


void DMA1_Channel1_IRQHandler (void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	if(DMA1_REG->ISR & (1<<3)){
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <DMA1_Channel1_IRQHandler+0x68>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d009      	beq.n	8000614 <DMA1_Channel1_IRQHandler+0x24>
		if (PDMA_CallBacks[0].TransferError != 0)
 8000600:	4b16      	ldr	r3, [pc, #88]	; (800065c <DMA1_Channel1_IRQHandler+0x6c>)
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d002      	beq.n	800060e <DMA1_Channel1_IRQHandler+0x1e>
			PDMA_CallBacks[0].TransferError();
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <DMA1_Channel1_IRQHandler+0x6c>)
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<3;
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <DMA1_Channel1_IRQHandler+0x68>)
 8000610:	2208      	movs	r2, #8
 8000612:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<2)){
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <DMA1_Channel1_IRQHandler+0x68>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	2b00      	cmp	r3, #0
 800061e:	d009      	beq.n	8000634 <DMA1_Channel1_IRQHandler+0x44>
		if (PDMA_CallBacks[0].HalfTransfer != 0)
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <DMA1_Channel1_IRQHandler+0x6c>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d002      	beq.n	800062e <DMA1_Channel1_IRQHandler+0x3e>
			PDMA_CallBacks[0].HalfTransfer();
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <DMA1_Channel1_IRQHandler+0x6c>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<2;
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <DMA1_Channel1_IRQHandler+0x68>)
 8000630:	2204      	movs	r2, #4
 8000632:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<1)){
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <DMA1_Channel1_IRQHandler+0x68>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f003 0302 	and.w	r3, r3, #2
 800063c:	2b00      	cmp	r3, #0
 800063e:	d009      	beq.n	8000654 <DMA1_Channel1_IRQHandler+0x64>
		if (PDMA_CallBacks[0].TransferComplete != 0)
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <DMA1_Channel1_IRQHandler+0x6c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <DMA1_Channel1_IRQHandler+0x5e>
			PDMA_CallBacks[0].TransferComplete();
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <DMA1_Channel1_IRQHandler+0x6c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<1;
 800064e:	4b02      	ldr	r3, [pc, #8]	; (8000658 <DMA1_Channel1_IRQHandler+0x68>)
 8000650:	2202      	movs	r2, #2
 8000652:	605a      	str	r2, [r3, #4]
	}
	
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40020000 	.word	0x40020000
 800065c:	200000a8 	.word	0x200000a8

08000660 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler (void){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	if(DMA1_REG->ISR & (1<<7)){
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <DMA1_Channel2_IRQHandler+0x68>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066c:	2b00      	cmp	r3, #0
 800066e:	d009      	beq.n	8000684 <DMA1_Channel2_IRQHandler+0x24>
		if (PDMA_CallBacks[1].TransferError != 0)
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <DMA1_Channel2_IRQHandler+0x6c>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d002      	beq.n	800067e <DMA1_Channel2_IRQHandler+0x1e>
			PDMA_CallBacks[1].TransferError();
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <DMA1_Channel2_IRQHandler+0x6c>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<7;
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <DMA1_Channel2_IRQHandler+0x68>)
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<6)){
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <DMA1_Channel2_IRQHandler+0x68>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800068c:	2b00      	cmp	r3, #0
 800068e:	d009      	beq.n	80006a4 <DMA1_Channel2_IRQHandler+0x44>
		if (PDMA_CallBacks[1].HalfTransfer != 0)
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <DMA1_Channel2_IRQHandler+0x6c>)
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d002      	beq.n	800069e <DMA1_Channel2_IRQHandler+0x3e>
			PDMA_CallBacks[1].HalfTransfer();
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <DMA1_Channel2_IRQHandler+0x6c>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<6;
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <DMA1_Channel2_IRQHandler+0x68>)
 80006a0:	2240      	movs	r2, #64	; 0x40
 80006a2:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<5)){
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <DMA1_Channel2_IRQHandler+0x68>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 0320 	and.w	r3, r3, #32
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d009      	beq.n	80006c4 <DMA1_Channel2_IRQHandler+0x64>
		if (PDMA_CallBacks[1].TransferComplete != 0)
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <DMA1_Channel2_IRQHandler+0x6c>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d002      	beq.n	80006be <DMA1_Channel2_IRQHandler+0x5e>
			PDMA_CallBacks[1].TransferComplete();
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <DMA1_Channel2_IRQHandler+0x6c>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<5;
 80006be:	4b02      	ldr	r3, [pc, #8]	; (80006c8 <DMA1_Channel2_IRQHandler+0x68>)
 80006c0:	2220      	movs	r2, #32
 80006c2:	605a      	str	r2, [r3, #4]
	}
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40020000 	.word	0x40020000
 80006cc:	200000a8 	.word	0x200000a8

080006d0 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler (void){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	if(DMA1_REG->ISR & (1<<11)){
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <DMA1_Channel3_IRQHandler+0x70>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d00a      	beq.n	80006f6 <DMA1_Channel3_IRQHandler+0x26>
		if (PDMA_CallBacks[2].TransferError != 0)
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <DMA1_Channel3_IRQHandler+0x74>)
 80006e2:	6a1b      	ldr	r3, [r3, #32]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d002      	beq.n	80006ee <DMA1_Channel3_IRQHandler+0x1e>
			PDMA_CallBacks[2].TransferError();
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <DMA1_Channel3_IRQHandler+0x74>)
 80006ea:	6a1b      	ldr	r3, [r3, #32]
 80006ec:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<11;
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <DMA1_Channel3_IRQHandler+0x70>)
 80006f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006f4:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<10)){
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <DMA1_Channel3_IRQHandler+0x70>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00a      	beq.n	8000718 <DMA1_Channel3_IRQHandler+0x48>
		if (PDMA_CallBacks[2].HalfTransfer != 0)
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <DMA1_Channel3_IRQHandler+0x74>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d002      	beq.n	8000710 <DMA1_Channel3_IRQHandler+0x40>
			PDMA_CallBacks[2].HalfTransfer();
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <DMA1_Channel3_IRQHandler+0x74>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<10;
 8000710:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <DMA1_Channel3_IRQHandler+0x70>)
 8000712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000716:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<9)){
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <DMA1_Channel3_IRQHandler+0x70>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00a      	beq.n	800073a <DMA1_Channel3_IRQHandler+0x6a>
		if (PDMA_CallBacks[2].TransferComplete != 0)
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <DMA1_Channel3_IRQHandler+0x74>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <DMA1_Channel3_IRQHandler+0x62>
			PDMA_CallBacks[2].TransferComplete();
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <DMA1_Channel3_IRQHandler+0x74>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<9;
 8000732:	4b03      	ldr	r3, [pc, #12]	; (8000740 <DMA1_Channel3_IRQHandler+0x70>)
 8000734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000738:	605a      	str	r2, [r3, #4]
	}
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40020000 	.word	0x40020000
 8000744:	200000a8 	.word	0x200000a8

08000748 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler (void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	if(DMA1_REG->ISR & (1<<15)){
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <DMA1_Channel4_IRQHandler+0x70>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000754:	2b00      	cmp	r3, #0
 8000756:	d00a      	beq.n	800076e <DMA1_Channel4_IRQHandler+0x26>
		if (PDMA_CallBacks[3].TransferError != 0)
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <DMA1_Channel4_IRQHandler+0x74>)
 800075a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800075c:	2b00      	cmp	r3, #0
 800075e:	d002      	beq.n	8000766 <DMA1_Channel4_IRQHandler+0x1e>
			PDMA_CallBacks[3].TransferError();
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <DMA1_Channel4_IRQHandler+0x74>)
 8000762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000764:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<15;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <DMA1_Channel4_IRQHandler+0x70>)
 8000768:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800076c:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<14)){
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <DMA1_Channel4_IRQHandler+0x70>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d00a      	beq.n	8000790 <DMA1_Channel4_IRQHandler+0x48>
		if (PDMA_CallBacks[3].HalfTransfer != 0)
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <DMA1_Channel4_IRQHandler+0x74>)
 800077c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800077e:	2b00      	cmp	r3, #0
 8000780:	d002      	beq.n	8000788 <DMA1_Channel4_IRQHandler+0x40>
			PDMA_CallBacks[3].HalfTransfer();
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <DMA1_Channel4_IRQHandler+0x74>)
 8000784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000786:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<14;
 8000788:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <DMA1_Channel4_IRQHandler+0x70>)
 800078a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800078e:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<13)){
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <DMA1_Channel4_IRQHandler+0x70>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000798:	2b00      	cmp	r3, #0
 800079a:	d00a      	beq.n	80007b2 <DMA1_Channel4_IRQHandler+0x6a>
		if (PDMA_CallBacks[3].TransferComplete != 0)
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <DMA1_Channel4_IRQHandler+0x74>)
 800079e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d002      	beq.n	80007aa <DMA1_Channel4_IRQHandler+0x62>
			PDMA_CallBacks[3].TransferComplete();
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <DMA1_Channel4_IRQHandler+0x74>)
 80007a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a8:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<13;
 80007aa:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <DMA1_Channel4_IRQHandler+0x70>)
 80007ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007b0:	605a      	str	r2, [r3, #4]
	}
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40020000 	.word	0x40020000
 80007bc:	200000a8 	.word	0x200000a8

080007c0 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler (void){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	if(DMA1_REG->ISR & (1<<19)){
 80007c4:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <DMA1_Channel5_IRQHandler+0x70>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00a      	beq.n	80007e6 <DMA1_Channel5_IRQHandler+0x26>
		if (PDMA_CallBacks[4].TransferError != 0)
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <DMA1_Channel5_IRQHandler+0x74>)
 80007d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d002      	beq.n	80007de <DMA1_Channel5_IRQHandler+0x1e>
			PDMA_CallBacks[4].TransferError();
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <DMA1_Channel5_IRQHandler+0x74>)
 80007da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007dc:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<19;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <DMA1_Channel5_IRQHandler+0x70>)
 80007e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007e4:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<18)){
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <DMA1_Channel5_IRQHandler+0x70>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d00a      	beq.n	8000808 <DMA1_Channel5_IRQHandler+0x48>
		if (PDMA_CallBacks[4].HalfTransfer != 0)
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <DMA1_Channel5_IRQHandler+0x74>)
 80007f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d002      	beq.n	8000800 <DMA1_Channel5_IRQHandler+0x40>
			PDMA_CallBacks[4].HalfTransfer();
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <DMA1_Channel5_IRQHandler+0x74>)
 80007fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007fe:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<18;
 8000800:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <DMA1_Channel5_IRQHandler+0x70>)
 8000802:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000806:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<17)){
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <DMA1_Channel5_IRQHandler+0x70>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000810:	2b00      	cmp	r3, #0
 8000812:	d00a      	beq.n	800082a <DMA1_Channel5_IRQHandler+0x6a>
		if (PDMA_CallBacks[4].TransferComplete != 0)
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <DMA1_Channel5_IRQHandler+0x74>)
 8000816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <DMA1_Channel5_IRQHandler+0x62>
			PDMA_CallBacks[4].TransferComplete();
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <DMA1_Channel5_IRQHandler+0x74>)
 800081e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000820:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<17;
 8000822:	4b03      	ldr	r3, [pc, #12]	; (8000830 <DMA1_Channel5_IRQHandler+0x70>)
 8000824:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000828:	605a      	str	r2, [r3, #4]
	}
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40020000 	.word	0x40020000
 8000834:	200000a8 	.word	0x200000a8

08000838 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler (void){
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	if(DMA1_REG->ISR & (1<<23)){
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <DMA1_Channel6_IRQHandler+0x70>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00a      	beq.n	800085e <DMA1_Channel6_IRQHandler+0x26>
		if (PDMA_CallBacks[5].TransferError != 0)
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <DMA1_Channel6_IRQHandler+0x74>)
 800084a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084c:	2b00      	cmp	r3, #0
 800084e:	d002      	beq.n	8000856 <DMA1_Channel6_IRQHandler+0x1e>
			PDMA_CallBacks[5].TransferError();
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <DMA1_Channel6_IRQHandler+0x74>)
 8000852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000854:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<23;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <DMA1_Channel6_IRQHandler+0x70>)
 8000858:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800085c:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<22)){
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <DMA1_Channel6_IRQHandler+0x70>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000866:	2b00      	cmp	r3, #0
 8000868:	d00a      	beq.n	8000880 <DMA1_Channel6_IRQHandler+0x48>
		if (PDMA_CallBacks[5].HalfTransfer != 0)
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <DMA1_Channel6_IRQHandler+0x74>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <DMA1_Channel6_IRQHandler+0x40>
			PDMA_CallBacks[5].HalfTransfer();
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <DMA1_Channel6_IRQHandler+0x74>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<22;
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <DMA1_Channel6_IRQHandler+0x70>)
 800087a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800087e:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<21)){
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <DMA1_Channel6_IRQHandler+0x70>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000888:	2b00      	cmp	r3, #0
 800088a:	d00a      	beq.n	80008a2 <DMA1_Channel6_IRQHandler+0x6a>
		if (PDMA_CallBacks[5].TransferComplete != 0)
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <DMA1_Channel6_IRQHandler+0x74>)
 800088e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000890:	2b00      	cmp	r3, #0
 8000892:	d002      	beq.n	800089a <DMA1_Channel6_IRQHandler+0x62>
			PDMA_CallBacks[5].TransferComplete();
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <DMA1_Channel6_IRQHandler+0x74>)
 8000896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000898:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<21;
 800089a:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <DMA1_Channel6_IRQHandler+0x70>)
 800089c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80008a0:	605a      	str	r2, [r3, #4]
	}
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40020000 	.word	0x40020000
 80008ac:	200000a8 	.word	0x200000a8

080008b0 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler (void){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	if(DMA1_REG->ISR & (1<<27)){
 80008b4:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <DMA1_Channel7_IRQHandler+0x70>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d00a      	beq.n	80008d6 <DMA1_Channel7_IRQHandler+0x26>
		if (PDMA_CallBacks[6].TransferError != 0)
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <DMA1_Channel7_IRQHandler+0x74>)
 80008c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <DMA1_Channel7_IRQHandler+0x1e>
			PDMA_CallBacks[6].TransferError();
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <DMA1_Channel7_IRQHandler+0x74>)
 80008ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008cc:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<27;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <DMA1_Channel7_IRQHandler+0x70>)
 80008d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008d4:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<26)){
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <DMA1_Channel7_IRQHandler+0x70>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d00a      	beq.n	80008f8 <DMA1_Channel7_IRQHandler+0x48>
		if (PDMA_CallBacks[6].HalfTransfer != 0)
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <DMA1_Channel7_IRQHandler+0x74>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d002      	beq.n	80008f0 <DMA1_Channel7_IRQHandler+0x40>
			PDMA_CallBacks[6].HalfTransfer();
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <DMA1_Channel7_IRQHandler+0x74>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<26;
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <DMA1_Channel7_IRQHandler+0x70>)
 80008f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80008f6:	605a      	str	r2, [r3, #4]
	}
	if(DMA1_REG->ISR & (1<<25)){
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <DMA1_Channel7_IRQHandler+0x70>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000900:	2b00      	cmp	r3, #0
 8000902:	d00a      	beq.n	800091a <DMA1_Channel7_IRQHandler+0x6a>
		if (PDMA_CallBacks[6].TransferComplete != 0)
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <DMA1_Channel7_IRQHandler+0x74>)
 8000906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000908:	2b00      	cmp	r3, #0
 800090a:	d002      	beq.n	8000912 <DMA1_Channel7_IRQHandler+0x62>
			PDMA_CallBacks[6].TransferComplete();
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <DMA1_Channel7_IRQHandler+0x74>)
 800090e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000910:	4798      	blx	r3
		DMA1_REG->IFCR = 1<<25;
 8000912:	4b03      	ldr	r3, [pc, #12]	; (8000920 <DMA1_Channel7_IRQHandler+0x70>)
 8000914:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000918:	605a      	str	r2, [r3, #4]
	}
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40020000 	.word	0x40020000
 8000924:	200000a8 	.word	0x200000a8

08000928 <main>:

#include "1- LIB/STD_TYPES.h"
#include "1- LIB/BIT_MATH.h"


int main(void){
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

	while(1){
 800092c:	e7fe      	b.n	800092c <main+0x4>
	...

08000930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000968 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000934:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000936:	e003      	b.n	8000940 <LoopCopyDataInit>

08000938 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800093a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800093c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800093e:	3104      	adds	r1, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000944:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000946:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000948:	d3f6      	bcc.n	8000938 <CopyDataInit>
	ldr	r2, =_sbss
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 800094c:	e002      	b.n	8000954 <LoopFillZerobss>

0800094e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800094e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000950:	f842 3b04 	str.w	r3, [r2], #4

08000954 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000956:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000958:	d3f9      	bcc.n	800094e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800095a:	f000 f837 	bl	80009cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095e:	f000 f8ef 	bl	8000b40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000962:	f7ff ffe1 	bl	8000928 <main>
	bx	lr
 8000966:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000968:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 800096c:	08000ba8 	.word	0x08000ba8
	ldr	r0, =_sdata
 8000970:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000974:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8000978:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 800097c:	200000fc 	.word	0x200000fc

08000980 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <CAN1_RX1_IRQHandler>

08000982 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr

0800098e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr

080009b2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
	...

080009cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009d0:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <SystemInit+0x5c>)
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <SystemInit+0x5c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80009dc:	4912      	ldr	r1, [pc, #72]	; (8000a28 <SystemInit+0x5c>)
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <SystemInit+0x5c>)
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <SystemInit+0x60>)
 80009e4:	4013      	ands	r3, r2
 80009e6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80009e8:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <SystemInit+0x5c>)
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <SystemInit+0x5c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009f6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80009f8:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <SystemInit+0x5c>)
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <SystemInit+0x5c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a02:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000a04:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <SystemInit+0x5c>)
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <SystemInit+0x5c>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a0e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <SystemInit+0x5c>)
 8000a12:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a16:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000a18:	f000 f80c 	bl	8000a34 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <SystemInit+0x64>)
 8000a1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a22:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	f8ff0000 	.word	0xf8ff0000
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000a38:	f000 f802 	bl	8000a40 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000a4e:	4a3a      	ldr	r2, [pc, #232]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000a50:	4b39      	ldr	r3, [pc, #228]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a58:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000a5a:	4b37      	ldr	r3, [pc, #220]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a62:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3301      	adds	r3, #1
 8000a68:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d103      	bne.n	8000a78 <SetSysClockTo72+0x38>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000a76:	d1f0      	bne.n	8000a5a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000a78:	4b2f      	ldr	r3, [pc, #188]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d002      	beq.n	8000a8a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000a84:	2301      	movs	r3, #1
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	e001      	b.n	8000a8e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d14b      	bne.n	8000b2c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000a94:	4a29      	ldr	r2, [pc, #164]	; (8000b3c <SetSysClockTo72+0xfc>)
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <SetSysClockTo72+0xfc>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000aa0:	4a26      	ldr	r2, [pc, #152]	; (8000b3c <SetSysClockTo72+0xfc>)
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <SetSysClockTo72+0xfc>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f023 0303 	bic.w	r3, r3, #3
 8000aaa:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000aac:	4a23      	ldr	r2, [pc, #140]	; (8000b3c <SetSysClockTo72+0xfc>)
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <SetSysClockTo72+0xfc>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000ab8:	4a1f      	ldr	r2, [pc, #124]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000ac0:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad2:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000ad4:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000ade:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000ae0:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000aea:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000aec:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000af6:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000af8:	bf00      	nop
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d0f9      	beq.n	8000afa <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000b06:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f023 0303 	bic.w	r3, r3, #3
 8000b10:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000b12:	4a09      	ldr	r2, [pc, #36]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000b1e:	bf00      	nop
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <SetSysClockTo72+0xf8>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 030c 	and.w	r3, r3, #12
 8000b28:	2b08      	cmp	r3, #8
 8000b2a:	d1f9      	bne.n	8000b20 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40022000 	.word	0x40022000

08000b40 <__libc_init_array>:
 8000b40:	b570      	push	{r4, r5, r6, lr}
 8000b42:	2500      	movs	r5, #0
 8000b44:	4e0c      	ldr	r6, [pc, #48]	; (8000b78 <__libc_init_array+0x38>)
 8000b46:	4c0d      	ldr	r4, [pc, #52]	; (8000b7c <__libc_init_array+0x3c>)
 8000b48:	1ba4      	subs	r4, r4, r6
 8000b4a:	10a4      	asrs	r4, r4, #2
 8000b4c:	42a5      	cmp	r5, r4
 8000b4e:	d109      	bne.n	8000b64 <__libc_init_array+0x24>
 8000b50:	f000 f81a 	bl	8000b88 <_init>
 8000b54:	2500      	movs	r5, #0
 8000b56:	4e0a      	ldr	r6, [pc, #40]	; (8000b80 <__libc_init_array+0x40>)
 8000b58:	4c0a      	ldr	r4, [pc, #40]	; (8000b84 <__libc_init_array+0x44>)
 8000b5a:	1ba4      	subs	r4, r4, r6
 8000b5c:	10a4      	asrs	r4, r4, #2
 8000b5e:	42a5      	cmp	r5, r4
 8000b60:	d105      	bne.n	8000b6e <__libc_init_array+0x2e>
 8000b62:	bd70      	pop	{r4, r5, r6, pc}
 8000b64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b68:	4798      	blx	r3
 8000b6a:	3501      	adds	r5, #1
 8000b6c:	e7ee      	b.n	8000b4c <__libc_init_array+0xc>
 8000b6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b72:	4798      	blx	r3
 8000b74:	3501      	adds	r5, #1
 8000b76:	e7f2      	b.n	8000b5e <__libc_init_array+0x1e>
 8000b78:	08000ba0 	.word	0x08000ba0
 8000b7c:	08000ba0 	.word	0x08000ba0
 8000b80:	08000ba0 	.word	0x08000ba0
 8000b84:	08000ba4 	.word	0x08000ba4

08000b88 <_init>:
 8000b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8a:	bf00      	nop
 8000b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b8e:	bc08      	pop	{r3}
 8000b90:	469e      	mov	lr, r3
 8000b92:	4770      	bx	lr

08000b94 <_fini>:
 8000b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b96:	bf00      	nop
 8000b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b9a:	bc08      	pop	{r3}
 8000b9c:	469e      	mov	lr, r3
 8000b9e:	4770      	bx	lr
